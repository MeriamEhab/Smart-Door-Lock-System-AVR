
CONTROL_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000343c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  0000343c  000034d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080017a  0080017a  000035ea  2**0
                  ALLOC
  3 .stab         00003024  00000000  00000000  000035ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001450  00000000  00000000  00006610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b583  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cc12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__vector_4>
      14:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__vector_7>
      20:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__vector_8>
      24:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__vector_9>
      28:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__vector_10>
      2c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
uint8 check_pass[PASSWORD_SIZE]={0};
volatile uint8 motor_time = 0;
uint8 pass_error = 0;

int main(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	a0 97       	sbiw	r28, 0x20	; 32
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61

	/*********	Timer1_Configuration structure	*********/
	TIMER_ConfigType TIMER_Config = {TIMER_1, CHANNEL_A, COMPARE, F_CPU_1024, 0, 8000};
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	9b 8b       	std	Y+19, r25	; 0x13
     e48:	8a 8b       	std	Y+18, r24	; 0x12
     e4a:	e2 e7       	ldi	r30, 0x72	; 114
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	fd 8b       	std	Y+21, r31	; 0x15
     e50:	ec 8b       	std	Y+20, r30	; 0x14
     e52:	f7 e0       	ldi	r31, 0x07	; 7
     e54:	fe 8b       	std	Y+22, r31	; 0x16
     e56:	ec 89       	ldd	r30, Y+20	; 0x14
     e58:	fd 89       	ldd	r31, Y+21	; 0x15
     e5a:	00 80       	ld	r0, Z
     e5c:	8c 89       	ldd	r24, Y+20	; 0x14
     e5e:	9d 89       	ldd	r25, Y+21	; 0x15
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	9d 8b       	std	Y+21, r25	; 0x15
     e64:	8c 8b       	std	Y+20, r24	; 0x14
     e66:	ea 89       	ldd	r30, Y+18	; 0x12
     e68:	fb 89       	ldd	r31, Y+19	; 0x13
     e6a:	00 82       	st	Z, r0
     e6c:	8a 89       	ldd	r24, Y+18	; 0x12
     e6e:	9b 89       	ldd	r25, Y+19	; 0x13
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	9b 8b       	std	Y+19, r25	; 0x13
     e74:	8a 8b       	std	Y+18, r24	; 0x12
     e76:	9e 89       	ldd	r25, Y+22	; 0x16
     e78:	91 50       	subi	r25, 0x01	; 1
     e7a:	9e 8b       	std	Y+22, r25	; 0x16
     e7c:	ee 89       	ldd	r30, Y+22	; 0x16
     e7e:	ee 23       	and	r30, r30
     e80:	51 f7       	brne	.-44     	; 0xe56 <main+0x28>

	/*********	UART_Configuration structure	*********/
	UART_ConfigTypes UART_Config = {DATA_BITS_8, ONE_STOP_BIT, NO_PARITY, 9600};
     e82:	ce 01       	movw	r24, r28
     e84:	08 96       	adiw	r24, 0x08	; 8
     e86:	98 8f       	std	Y+24, r25	; 0x18
     e88:	8f 8b       	std	Y+23, r24	; 0x17
     e8a:	eb e6       	ldi	r30, 0x6B	; 107
     e8c:	f1 e0       	ldi	r31, 0x01	; 1
     e8e:	fa 8f       	std	Y+26, r31	; 0x1a
     e90:	e9 8f       	std	Y+25, r30	; 0x19
     e92:	f7 e0       	ldi	r31, 0x07	; 7
     e94:	fb 8f       	std	Y+27, r31	; 0x1b
     e96:	e9 8d       	ldd	r30, Y+25	; 0x19
     e98:	fa 8d       	ldd	r31, Y+26	; 0x1a
     e9a:	00 80       	ld	r0, Z
     e9c:	89 8d       	ldd	r24, Y+25	; 0x19
     e9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	9a 8f       	std	Y+26, r25	; 0x1a
     ea4:	89 8f       	std	Y+25, r24	; 0x19
     ea6:	ef 89       	ldd	r30, Y+23	; 0x17
     ea8:	f8 8d       	ldd	r31, Y+24	; 0x18
     eaa:	00 82       	st	Z, r0
     eac:	8f 89       	ldd	r24, Y+23	; 0x17
     eae:	98 8d       	ldd	r25, Y+24	; 0x18
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	98 8f       	std	Y+24, r25	; 0x18
     eb4:	8f 8b       	std	Y+23, r24	; 0x17
     eb6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     eb8:	91 50       	subi	r25, 0x01	; 1
     eba:	9b 8f       	std	Y+27, r25	; 0x1b
     ebc:	eb 8d       	ldd	r30, Y+27	; 0x1b
     ebe:	ee 23       	and	r30, r30
     ec0:	51 f7       	brne	.-44     	; 0xe96 <main+0x68>

	/*********	TWI_Configuration structure		*********/
	TWI_ConfigType TWI_Configuration = {TWI_ADDRESS,400000};
     ec2:	ce 01       	movw	r24, r28
     ec4:	0f 96       	adiw	r24, 0x0f	; 15
     ec6:	9d 8f       	std	Y+29, r25	; 0x1d
     ec8:	8c 8f       	std	Y+28, r24	; 0x1c
     eca:	e8 e6       	ldi	r30, 0x68	; 104
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	ff 8f       	std	Y+31, r31	; 0x1f
     ed0:	ee 8f       	std	Y+30, r30	; 0x1e
     ed2:	f3 e0       	ldi	r31, 0x03	; 3
     ed4:	f8 a3       	std	Y+32, r31	; 0x20
     ed6:	ee 8d       	ldd	r30, Y+30	; 0x1e
     ed8:	ff 8d       	ldd	r31, Y+31	; 0x1f
     eda:	00 80       	ld	r0, Z
     edc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ede:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	9f 8f       	std	Y+31, r25	; 0x1f
     ee4:	8e 8f       	std	Y+30, r24	; 0x1e
     ee6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     ee8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     eea:	00 82       	st	Z, r0
     eec:	8c 8d       	ldd	r24, Y+28	; 0x1c
     eee:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	9d 8f       	std	Y+29, r25	; 0x1d
     ef4:	8c 8f       	std	Y+28, r24	; 0x1c
     ef6:	98 a1       	ldd	r25, Y+32	; 0x20
     ef8:	91 50       	subi	r25, 0x01	; 1
     efa:	98 a3       	std	Y+32, r25	; 0x20
     efc:	e8 a1       	ldd	r30, Y+32	; 0x20
     efe:	ee 23       	and	r30, r30
     f00:	51 f7       	brne	.-44     	; 0xed6 <main+0xa8>


	UART_init(&UART_Config);		//Initialize UART
     f02:	ce 01       	movw	r24, r28
     f04:	08 96       	adiw	r24, 0x08	; 8
     f06:	0e 94 9d 18 	call	0x313a	; 0x313a <UART_init>
	DcMotor_Init();						//Initialize DC Motor
     f0a:	0e 94 90 10 	call	0x2120	; 0x2120 <DcMotor_Init>
	TWI_init(&TWI_Configuration);		//Initialize TWI
     f0e:	ce 01       	movw	r24, r28
     f10:	0f 96       	adiw	r24, 0x0f	; 15
     f12:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <TWI_init>
	BUZZER_init();						//Initialize Buzzer
     f16:	0e 94 ee 13 	call	0x27dc	; 0x27dc <BUZZER_init>


	TIMER1_setCallBack(motorTimer);
     f1a:	85 e0       	ldi	r24, 0x05	; 5
     f1c:	98 e0       	ldi	r25, 0x08	; 8
     f1e:	0e 94 c0 13 	call	0x2780	; 0x2780 <TIMER1_setCallBack>
     f22:	19 c0       	rjmp	.+50     	; 0xf56 <main+0x128>
	{
		/****	RECIEVE PASS and CONFIRM from HMI_ECU ****/

		while(matching == 0)
		{
			create_password();			//Call create_pass function to check on passwords
     f24:	0e 94 0a 0b 	call	0x1614	; 0x1614 <create_password>
			UART_sendByte(CHECK);	//Sending CHECK instruction to HMI_ECU
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
			while(UART_recieveByte()!= UART1_READY){}	//Wait for MC1_Ready instruction
     f2e:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
     f32:	83 30       	cpi	r24, 0x03	; 3
     f34:	e1 f7       	brne	.-8      	; 0xf2e <main+0x100>
			UART_sendByte(matching);				//Send the check result whether passwords are matched or not
     f36:	80 91 7c 01 	lds	r24, 0x017C
     f3a:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>

			if(matching == 1)
     f3e:	80 91 7c 01 	lds	r24, 0x017C
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	41 f4       	brne	.+16     	; 0xf56 <main+0x128>
			{
				/****** SAVE PASS in EEPROM *******/
				EEPROM_WRITE_PASS(pass);
     f46:	8d e7       	ldi	r24, 0x7D	; 125
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <EEPROM_WRITE_PASS>
				EEPROM_WRITE_CONFRIM(confirm);
     f4e:	82 e8       	ldi	r24, 0x82	; 130
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <EEPROM_WRITE_CONFRIM>

	while(1)
	{
		/****	RECIEVE PASS and CONFIRM from HMI_ECU ****/

		while(matching == 0)
     f56:	80 91 7c 01 	lds	r24, 0x017C
     f5a:	88 23       	and	r24, r24
     f5c:	19 f3       	breq	.-58     	; 0xf24 <main+0xf6>
				EEPROM_WRITE_CONFRIM(confirm);
			}
		}

		/***** RECIEVE OPTION *****/
		option_processing();
     f5e:	0e 94 11 08 	call	0x1022	; 0x1022 <option_processing>

		/***** Activate Buzzer when Password is entered wrong 3 times *****/
		if(eeprom_match == 0 && pass_error == MAX_NUM_OF_MISTAKES)
     f62:	80 91 87 01 	lds	r24, 0x0187
     f66:	88 23       	and	r24, r24
     f68:	b1 f4       	brne	.+44     	; 0xf96 <main+0x168>
     f6a:	80 91 95 01 	lds	r24, 0x0195
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	91 f4       	brne	.+36     	; 0xf96 <main+0x168>
		{
			TIMER_init (&TIMER_Config);	//Initialize Timer1
     f72:	ce 01       	movw	r24, r28
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	0e 94 55 12 	call	0x24aa	; 0x24aa <TIMER_init>
			motor_time = 0;						//Set seconds to 0
     f7a:	10 92 94 01 	sts	0x0194, r1
			BUZZER_on();						//Activate Buzzer
     f7e:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <BUZZER_on>
			while(motor_time <= 60){			//Delay 60 seconds using Timer1
     f82:	80 91 94 01 	lds	r24, 0x0194
     f86:	8d 33       	cpi	r24, 0x3D	; 61
     f88:	e0 f3       	brcs	.-8      	; 0xf82 <main+0x154>
			}
			TIMER_DeInit();					//Deactivate Timer1
     f8a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TIMER_DeInit>
			BUZZER_off();						//Deactivate Buzzer
     f8e:	0e 94 06 14 	call	0x280c	; 0x280c <BUZZER_off>

			pass_error = 0;						//Reset Password error variable
     f92:	10 92 95 01 	sts	0x0195, r1
		}
		/***** Handling the operation chosen by the user if entered password is correct *****/

		if (eeprom_match == 1 && option == '+')
     f96:	80 91 87 01 	lds	r24, 0x0187
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	49 f5       	brne	.+82     	; 0xff0 <main+0x1c2>
     f9e:	80 91 8e 01 	lds	r24, 0x018E
     fa2:	8b 32       	cpi	r24, 0x2B	; 43
     fa4:	29 f5       	brne	.+74     	; 0xff0 <main+0x1c2>
		{
			TIMER_init(&TIMER_Config);	//Initialize Timer1
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 55 12 	call	0x24aa	; 0x24aa <TIMER_init>
			motor_time = 0;						//Set seconds to 0
     fae:	10 92 94 01 	sts	0x0194, r1
			DcMotor_Rotate(CW);			//Activate DC Motor
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0e 94 b0 10 	call	0x2160	; 0x2160 <DcMotor_Rotate>
			while(motor_time < OPENING_DOOR_TIME)
     fb8:	80 91 94 01 	lds	r24, 0x0194
     fbc:	8f 30       	cpi	r24, 0x0F	; 15
     fbe:	e0 f3       	brcs	.-8      	; 0xfb8 <main+0x18a>
			{
				//Delay 15 seconds using Timer1
			}
			motor_time = 0;						//Set seconds to 0 to reset counting
     fc0:	10 92 94 01 	sts	0x0194, r1
			DcMotor_Rotate(STOP);			//Deactivate DC Motor
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	0e 94 b0 10 	call	0x2160	; 0x2160 <DcMotor_Rotate>
			while(motor_time < HOLDING_DOOR_TIME)
     fca:	80 91 94 01 	lds	r24, 0x0194
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	e0 f3       	brcs	.-8      	; 0xfca <main+0x19c>
			{
				//Delay 3 seconds using Timer1
			}
			motor_time = 0;						//Set seconds to 0 to reset counting
     fd2:	10 92 94 01 	sts	0x0194, r1
			DcMotor_Rotate(CW);			//Activate DC Motor
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	0e 94 b0 10 	call	0x2160	; 0x2160 <DcMotor_Rotate>
			while(motor_time < CLOSING_DOOR_TIME)
     fdc:	80 91 94 01 	lds	r24, 0x0194
     fe0:	8f 30       	cpi	r24, 0x0F	; 15
     fe2:	e0 f3       	brcs	.-8      	; 0xfdc <main+0x1ae>
			{
				//Delay 15 seconds using Timer1
			}
			DcMotor_Rotate(STOP);			//Deactivate DC Motor
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	0e 94 b0 10 	call	0x2160	; 0x2160 <DcMotor_Rotate>
			TIMER_DeInit();					//Deactivate Timer1
     fea:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <TIMER_DeInit>
     fee:	0a c0       	rjmp	.+20     	; 0x1004 <main+0x1d6>
		}
		else if(eeprom_match == 1 && option == '-'){
     ff0:	80 91 87 01 	lds	r24, 0x0187
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	31 f4       	brne	.+12     	; 0x1004 <main+0x1d6>
     ff8:	80 91 8e 01 	lds	r24, 0x018E
     ffc:	8d 32       	cpi	r24, 0x2D	; 45
     ffe:	11 f4       	brne	.+4      	; 0x1004 <main+0x1d6>
			matching = 0;						/***** Reset pass_match to go back to create_pass function *****/
    1000:	10 92 7c 01 	sts	0x017C, r1
		}

		eeprom_match = 0;						/***** Reset eeprom_match to go back to option screen *****/
    1004:	10 92 87 01 	sts	0x0187, r1
    1008:	a6 cf       	rjmp	.-180    	; 0xf56 <main+0x128>

0000100a <motorTimer>:
}

/**********************************	Function Definitions ************************************/

void motorTimer(void)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	//SET CALLBACK Function
	motor_time++;		//Increment number of seconds every time interrupt occurs and set callback function is called
    1012:	80 91 94 01 	lds	r24, 0x0194
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	80 93 94 01 	sts	0x0194, r24
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <option_processing>:

void option_processing(void){
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	c6 54       	subi	r28, 0x46	; 70
    1030:	d0 40       	sbci	r29, 0x00	; 0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
	pass_error = 0;
    103c:	10 92 95 01 	sts	0x0195, r1
	while(UART_recieveByte()!= OPTION){}	// Wait for option instruction
    1040:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    1044:	86 30       	cpi	r24, 0x06	; 6
    1046:	e1 f7       	brne	.-8      	; 0x1040 <option_processing+0x1e>
	UART_sendByte(UART2_READY);				// Send ready to receive the option
    1048:	84 e0       	ldi	r24, 0x04	; 4
    104a:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
	option = UART_recieveByte();			// Store the option
    104e:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    1052:	80 93 8e 01 	sts	0x018E, r24
	if(option == '+' || option == '-')
    1056:	80 91 8e 01 	lds	r24, 0x018E
    105a:	8b 32       	cpi	r24, 0x2B	; 43
    105c:	09 f4       	brne	.+2      	; 0x1060 <option_processing+0x3e>
    105e:	c5 c2       	rjmp	.+1418   	; 0x15ea <option_processing+0x5c8>
    1060:	80 91 8e 01 	lds	r24, 0x018E
    1064:	8d 32       	cpi	r24, 0x2D	; 45
    1066:	09 f0       	breq	.+2      	; 0x106a <option_processing+0x48>
    1068:	c9 c2       	rjmp	.+1426   	; 0x15fc <option_processing+0x5da>
    106a:	bf c2       	rjmp	.+1406   	; 0x15ea <option_processing+0x5c8>
	{
		while(eeprom_match == 0 && pass_error < MAX_NUM_OF_MISTAKES )
		{

			UART_sendByte(UART2_READY);					// Send ready to receive the password
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
			while(UART_recieveByte()!= PASS_READY){}	// Wait for password confirmation from HMI_ECU
    1072:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	e1 f7       	brne	.-8      	; 0x1072 <option_processing+0x50>
			counter = 0;
    107a:	10 92 7b 01 	sts	0x017B, r1
			UART_sendByte(UART2_READY);					// Send ready to receive the password
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
			for(counter = 0; counter< PASSWORD_SIZE; counter++)
    1084:	10 92 7b 01 	sts	0x017B, r1
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <option_processing+0x86>
			{
				check_pass[counter] = UART_recieveByte();
    108a:	80 91 7b 01 	lds	r24, 0x017B
    108e:	08 2f       	mov	r16, r24
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    1096:	f8 01       	movw	r30, r16
    1098:	e1 57       	subi	r30, 0x71	; 113
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	80 83       	st	Z, r24

			UART_sendByte(UART2_READY);					// Send ready to receive the password
			while(UART_recieveByte()!= PASS_READY){}	// Wait for password confirmation from HMI_ECU
			counter = 0;
			UART_sendByte(UART2_READY);					// Send ready to receive the password
			for(counter = 0; counter< PASSWORD_SIZE; counter++)
    109e:	80 91 7b 01 	lds	r24, 0x017B
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	80 93 7b 01 	sts	0x017B, r24
    10a8:	80 91 7b 01 	lds	r24, 0x017B
    10ac:	85 30       	cpi	r24, 0x05	; 5
    10ae:	68 f3       	brcs	.-38     	; 0x108a <option_processing+0x68>
			{
				check_pass[counter] = UART_recieveByte();
			}

			EEPROM_readByte(PASS_ADDRESS, passEEPROM);  		/* Read PASS from the external EEPROM */
    10b0:	28 e8       	ldi	r18, 0x88	; 136
    10b2:	31 e0       	ldi	r19, 0x01	; 1
    10b4:	81 e1       	ldi	r24, 0x11	; 17
    10b6:	93 e0       	ldi	r25, 0x03	; 3
    10b8:	b9 01       	movw	r22, r18
    10ba:	0e 94 53 14 	call	0x28a6	; 0x28a6 <EEPROM_readByte>
    10be:	fe 01       	movw	r30, r28
    10c0:	ed 5b       	subi	r30, 0xBD	; 189
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a0 e2       	ldi	r26, 0x20	; 32
    10ca:	b1 e4       	ldi	r27, 0x41	; 65
    10cc:	80 83       	st	Z, r24
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	a2 83       	std	Z+2, r26	; 0x02
    10d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d4:	8e 01       	movw	r16, r28
    10d6:	01 5c       	subi	r16, 0xC1	; 193
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	fe 01       	movw	r30, r28
    10dc:	ed 5b       	subi	r30, 0xBD	; 189
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	93 81       	ldd	r25, Z+3	; 0x03
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	4a e7       	ldi	r20, 0x7A	; 122
    10ee:	53 e4       	ldi	r21, 0x43	; 67
    10f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	f8 01       	movw	r30, r16
    10fa:	80 83       	st	Z, r24
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	a2 83       	std	Z+2, r26	; 0x02
    1100:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1102:	fe 01       	movw	r30, r28
    1104:	ff 96       	adiw	r30, 0x3f	; 63
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	93 81       	ldd	r25, Z+3	; 0x03
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	5f e3       	ldi	r21, 0x3F	; 63
    1116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    111a:	88 23       	and	r24, r24
    111c:	2c f4       	brge	.+10     	; 0x1128 <option_processing+0x106>
		__ticks = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9e af       	std	Y+62, r25	; 0x3e
    1124:	8d af       	std	Y+61, r24	; 0x3d
    1126:	46 c0       	rjmp	.+140    	; 0x11b4 <option_processing+0x192>
	else if (__tmp > 65535)
    1128:	fe 01       	movw	r30, r28
    112a:	ff 96       	adiw	r30, 0x3f	; 63
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	64 f5       	brge	.+88     	; 0x119c <option_processing+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	fe 01       	movw	r30, r28
    1146:	ed 5b       	subi	r30, 0xBD	; 189
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9e af       	std	Y+62, r25	; 0x3e
    1170:	8d af       	std	Y+61, r24	; 0x3d
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <option_processing+0x170>
    1174:	89 e1       	ldi	r24, 0x19	; 25
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9c af       	std	Y+60, r25	; 0x3c
    117a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    117c:	8b ad       	ldd	r24, Y+59	; 0x3b
    117e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <option_processing+0x15e>
    1184:	9c af       	std	Y+60, r25	; 0x3c
    1186:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1188:	8d ad       	ldd	r24, Y+61	; 0x3d
    118a:	9e ad       	ldd	r25, Y+62	; 0x3e
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	9e af       	std	Y+62, r25	; 0x3e
    1190:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1192:	8d ad       	ldd	r24, Y+61	; 0x3d
    1194:	9e ad       	ldd	r25, Y+62	; 0x3e
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	69 f7       	brne	.-38     	; 0x1174 <option_processing+0x152>
    119a:	16 c0       	rjmp	.+44     	; 0x11c8 <option_processing+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119c:	fe 01       	movw	r30, r28
    119e:	ff 96       	adiw	r30, 0x3f	; 63
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	9e af       	std	Y+62, r25	; 0x3e
    11b2:	8d af       	std	Y+61, r24	; 0x3d
    11b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b8:	9a af       	std	Y+58, r25	; 0x3a
    11ba:	89 af       	std	Y+57, r24	; 0x39
    11bc:	89 ad       	ldd	r24, Y+57	; 0x39
    11be:	9a ad       	ldd	r25, Y+58	; 0x3a
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <option_processing+0x19e>
    11c4:	9a af       	std	Y+58, r25	; 0x3a
    11c6:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x8, passEEPROM+1);  		/* Read PASS from the external EEPROM */
    11c8:	29 e8       	ldi	r18, 0x89	; 137
    11ca:	31 e0       	ldi	r19, 0x01	; 1
    11cc:	89 e1       	ldi	r24, 0x19	; 25
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	b9 01       	movw	r22, r18
    11d2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <EEPROM_readByte>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 e2       	ldi	r26, 0x20	; 32
    11dc:	b1 e4       	ldi	r27, 0x41	; 65
    11de:	8d ab       	std	Y+53, r24	; 0x35
    11e0:	9e ab       	std	Y+54, r25	; 0x36
    11e2:	af ab       	std	Y+55, r26	; 0x37
    11e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e6:	6d a9       	ldd	r22, Y+53	; 0x35
    11e8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ea:	8f a9       	ldd	r24, Y+55	; 0x37
    11ec:	98 ad       	ldd	r25, Y+56	; 0x38
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4a e7       	ldi	r20, 0x7A	; 122
    11f4:	53 e4       	ldi	r21, 0x43	; 67
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	89 ab       	std	Y+49, r24	; 0x31
    1200:	9a ab       	std	Y+50, r25	; 0x32
    1202:	ab ab       	std	Y+51, r26	; 0x33
    1204:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1206:	69 a9       	ldd	r22, Y+49	; 0x31
    1208:	7a a9       	ldd	r23, Y+50	; 0x32
    120a:	8b a9       	ldd	r24, Y+51	; 0x33
    120c:	9c a9       	ldd	r25, Y+52	; 0x34
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e8       	ldi	r20, 0x80	; 128
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    121a:	88 23       	and	r24, r24
    121c:	2c f4       	brge	.+10     	; 0x1228 <option_processing+0x206>
		__ticks = 1;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	98 ab       	std	Y+48, r25	; 0x30
    1224:	8f a7       	std	Y+47, r24	; 0x2f
    1226:	3f c0       	rjmp	.+126    	; 0x12a6 <option_processing+0x284>
	else if (__tmp > 65535)
    1228:	69 a9       	ldd	r22, Y+49	; 0x31
    122a:	7a a9       	ldd	r23, Y+50	; 0x32
    122c:	8b a9       	ldd	r24, Y+51	; 0x33
    122e:	9c a9       	ldd	r25, Y+52	; 0x34
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	3f ef       	ldi	r19, 0xFF	; 255
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	57 e4       	ldi	r21, 0x47	; 71
    1238:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    123c:	18 16       	cp	r1, r24
    123e:	4c f5       	brge	.+82     	; 0x1292 <option_processing+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1240:	6d a9       	ldd	r22, Y+53	; 0x35
    1242:	7e a9       	ldd	r23, Y+54	; 0x36
    1244:	8f a9       	ldd	r24, Y+55	; 0x37
    1246:	98 ad       	ldd	r25, Y+56	; 0x38
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e2       	ldi	r20, 0x20	; 32
    124e:	51 e4       	ldi	r21, 0x41	; 65
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	bc 01       	movw	r22, r24
    125a:	cd 01       	movw	r24, r26
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	98 ab       	std	Y+48, r25	; 0x30
    1266:	8f a7       	std	Y+47, r24	; 0x2f
    1268:	0f c0       	rjmp	.+30     	; 0x1288 <option_processing+0x266>
    126a:	89 e1       	ldi	r24, 0x19	; 25
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9e a7       	std	Y+46, r25	; 0x2e
    1270:	8d a7       	std	Y+45, r24	; 0x2d
    1272:	8d a5       	ldd	r24, Y+45	; 0x2d
    1274:	9e a5       	ldd	r25, Y+46	; 0x2e
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <option_processing+0x254>
    127a:	9e a7       	std	Y+46, r25	; 0x2e
    127c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1280:	98 a9       	ldd	r25, Y+48	; 0x30
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	98 ab       	std	Y+48, r25	; 0x30
    1286:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1288:	8f a5       	ldd	r24, Y+47	; 0x2f
    128a:	98 a9       	ldd	r25, Y+48	; 0x30
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	69 f7       	brne	.-38     	; 0x126a <option_processing+0x248>
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <option_processing+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1292:	69 a9       	ldd	r22, Y+49	; 0x31
    1294:	7a a9       	ldd	r23, Y+50	; 0x32
    1296:	8b a9       	ldd	r24, Y+51	; 0x33
    1298:	9c a9       	ldd	r25, Y+52	; 0x34
    129a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	98 ab       	std	Y+48, r25	; 0x30
    12a4:	8f a7       	std	Y+47, r24	; 0x2f
    12a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a8:	98 a9       	ldd	r25, Y+48	; 0x30
    12aa:	9c a7       	std	Y+44, r25	; 0x2c
    12ac:	8b a7       	std	Y+43, r24	; 0x2b
    12ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    12b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <option_processing+0x290>
    12b6:	9c a7       	std	Y+44, r25	; 0x2c
    12b8:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x10, passEEPROM+2);  		/* Read PASS from the external EEPROM */
    12ba:	2a e8       	ldi	r18, 0x8A	; 138
    12bc:	31 e0       	ldi	r19, 0x01	; 1
    12be:	81 e2       	ldi	r24, 0x21	; 33
    12c0:	93 e0       	ldi	r25, 0x03	; 3
    12c2:	b9 01       	movw	r22, r18
    12c4:	0e 94 53 14 	call	0x28a6	; 0x28a6 <EEPROM_readByte>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a0 e2       	ldi	r26, 0x20	; 32
    12ce:	b1 e4       	ldi	r27, 0x41	; 65
    12d0:	8f a3       	std	Y+39, r24	; 0x27
    12d2:	98 a7       	std	Y+40, r25	; 0x28
    12d4:	a9 a7       	std	Y+41, r26	; 0x29
    12d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d8:	6f a1       	ldd	r22, Y+39	; 0x27
    12da:	78 a5       	ldd	r23, Y+40	; 0x28
    12dc:	89 a5       	ldd	r24, Y+41	; 0x29
    12de:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4a e7       	ldi	r20, 0x7A	; 122
    12e6:	53 e4       	ldi	r21, 0x43	; 67
    12e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	8b a3       	std	Y+35, r24	; 0x23
    12f2:	9c a3       	std	Y+36, r25	; 0x24
    12f4:	ad a3       	std	Y+37, r26	; 0x25
    12f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12f8:	6b a1       	ldd	r22, Y+35	; 0x23
    12fa:	7c a1       	ldd	r23, Y+36	; 0x24
    12fc:	8d a1       	ldd	r24, Y+37	; 0x25
    12fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	5f e3       	ldi	r21, 0x3F	; 63
    1308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    130c:	88 23       	and	r24, r24
    130e:	2c f4       	brge	.+10     	; 0x131a <option_processing+0x2f8>
		__ticks = 1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9a a3       	std	Y+34, r25	; 0x22
    1316:	89 a3       	std	Y+33, r24	; 0x21
    1318:	3f c0       	rjmp	.+126    	; 0x1398 <option_processing+0x376>
	else if (__tmp > 65535)
    131a:	6b a1       	ldd	r22, Y+35	; 0x23
    131c:	7c a1       	ldd	r23, Y+36	; 0x24
    131e:	8d a1       	ldd	r24, Y+37	; 0x25
    1320:	9e a1       	ldd	r25, Y+38	; 0x26
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	3f ef       	ldi	r19, 0xFF	; 255
    1326:	4f e7       	ldi	r20, 0x7F	; 127
    1328:	57 e4       	ldi	r21, 0x47	; 71
    132a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    132e:	18 16       	cp	r1, r24
    1330:	4c f5       	brge	.+82     	; 0x1384 <option_processing+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1332:	6f a1       	ldd	r22, Y+39	; 0x27
    1334:	78 a5       	ldd	r23, Y+40	; 0x28
    1336:	89 a5       	ldd	r24, Y+41	; 0x29
    1338:	9a a5       	ldd	r25, Y+42	; 0x2a
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	51 e4       	ldi	r21, 0x41	; 65
    1342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	9a a3       	std	Y+34, r25	; 0x22
    1358:	89 a3       	std	Y+33, r24	; 0x21
    135a:	0f c0       	rjmp	.+30     	; 0x137a <option_processing+0x358>
    135c:	89 e1       	ldi	r24, 0x19	; 25
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	98 a3       	std	Y+32, r25	; 0x20
    1362:	8f 8f       	std	Y+31, r24	; 0x1f
    1364:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1366:	98 a1       	ldd	r25, Y+32	; 0x20
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <option_processing+0x346>
    136c:	98 a3       	std	Y+32, r25	; 0x20
    136e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1370:	89 a1       	ldd	r24, Y+33	; 0x21
    1372:	9a a1       	ldd	r25, Y+34	; 0x22
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	9a a3       	std	Y+34, r25	; 0x22
    1378:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	89 a1       	ldd	r24, Y+33	; 0x21
    137c:	9a a1       	ldd	r25, Y+34	; 0x22
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	69 f7       	brne	.-38     	; 0x135c <option_processing+0x33a>
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <option_processing+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1384:	6b a1       	ldd	r22, Y+35	; 0x23
    1386:	7c a1       	ldd	r23, Y+36	; 0x24
    1388:	8d a1       	ldd	r24, Y+37	; 0x25
    138a:	9e a1       	ldd	r25, Y+38	; 0x26
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9a a3       	std	Y+34, r25	; 0x22
    1396:	89 a3       	std	Y+33, r24	; 0x21
    1398:	89 a1       	ldd	r24, Y+33	; 0x21
    139a:	9a a1       	ldd	r25, Y+34	; 0x22
    139c:	9e 8f       	std	Y+30, r25	; 0x1e
    139e:	8d 8f       	std	Y+29, r24	; 0x1d
    13a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <option_processing+0x382>
    13a8:	9e 8f       	std	Y+30, r25	; 0x1e
    13aa:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x18, passEEPROM+3);  		/* Read PASS from the external EEPROM */
    13ac:	2b e8       	ldi	r18, 0x8B	; 139
    13ae:	31 e0       	ldi	r19, 0x01	; 1
    13b0:	89 e2       	ldi	r24, 0x29	; 41
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	b9 01       	movw	r22, r18
    13b6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <EEPROM_readByte>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 e2       	ldi	r26, 0x20	; 32
    13c0:	b1 e4       	ldi	r27, 0x41	; 65
    13c2:	89 8f       	std	Y+25, r24	; 0x19
    13c4:	9a 8f       	std	Y+26, r25	; 0x1a
    13c6:	ab 8f       	std	Y+27, r26	; 0x1b
    13c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ca:	69 8d       	ldd	r22, Y+25	; 0x19
    13cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	4a e7       	ldi	r20, 0x7A	; 122
    13d8:	53 e4       	ldi	r21, 0x43	; 67
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8d 8b       	std	Y+21, r24	; 0x15
    13e4:	9e 8b       	std	Y+22, r25	; 0x16
    13e6:	af 8b       	std	Y+23, r26	; 0x17
    13e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ea:	6d 89       	ldd	r22, Y+21	; 0x15
    13ec:	7e 89       	ldd	r23, Y+22	; 0x16
    13ee:	8f 89       	ldd	r24, Y+23	; 0x17
    13f0:	98 8d       	ldd	r25, Y+24	; 0x18
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	2c f4       	brge	.+10     	; 0x140c <option_processing+0x3ea>
		__ticks = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9c 8b       	std	Y+20, r25	; 0x14
    1408:	8b 8b       	std	Y+19, r24	; 0x13
    140a:	3f c0       	rjmp	.+126    	; 0x148a <option_processing+0x468>
	else if (__tmp > 65535)
    140c:	6d 89       	ldd	r22, Y+21	; 0x15
    140e:	7e 89       	ldd	r23, Y+22	; 0x16
    1410:	8f 89       	ldd	r24, Y+23	; 0x17
    1412:	98 8d       	ldd	r25, Y+24	; 0x18
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	3f ef       	ldi	r19, 0xFF	; 255
    1418:	4f e7       	ldi	r20, 0x7F	; 127
    141a:	57 e4       	ldi	r21, 0x47	; 71
    141c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1420:	18 16       	cp	r1, r24
    1422:	4c f5       	brge	.+82     	; 0x1476 <option_processing+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1424:	69 8d       	ldd	r22, Y+25	; 0x19
    1426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    142a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e2       	ldi	r20, 0x20	; 32
    1432:	51 e4       	ldi	r21, 0x41	; 65
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9c 8b       	std	Y+20, r25	; 0x14
    144a:	8b 8b       	std	Y+19, r24	; 0x13
    144c:	0f c0       	rjmp	.+30     	; 0x146c <option_processing+0x44a>
    144e:	89 e1       	ldi	r24, 0x19	; 25
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9a 8b       	std	Y+18, r25	; 0x12
    1454:	89 8b       	std	Y+17, r24	; 0x11
    1456:	89 89       	ldd	r24, Y+17	; 0x11
    1458:	9a 89       	ldd	r25, Y+18	; 0x12
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <option_processing+0x438>
    145e:	9a 8b       	std	Y+18, r25	; 0x12
    1460:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1462:	8b 89       	ldd	r24, Y+19	; 0x13
    1464:	9c 89       	ldd	r25, Y+20	; 0x14
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	9c 8b       	std	Y+20, r25	; 0x14
    146a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146c:	8b 89       	ldd	r24, Y+19	; 0x13
    146e:	9c 89       	ldd	r25, Y+20	; 0x14
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	69 f7       	brne	.-38     	; 0x144e <option_processing+0x42c>
    1474:	14 c0       	rjmp	.+40     	; 0x149e <option_processing+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1476:	6d 89       	ldd	r22, Y+21	; 0x15
    1478:	7e 89       	ldd	r23, Y+22	; 0x16
    147a:	8f 89       	ldd	r24, Y+23	; 0x17
    147c:	98 8d       	ldd	r25, Y+24	; 0x18
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9c 8b       	std	Y+20, r25	; 0x14
    1488:	8b 8b       	std	Y+19, r24	; 0x13
    148a:	8b 89       	ldd	r24, Y+19	; 0x13
    148c:	9c 89       	ldd	r25, Y+20	; 0x14
    148e:	98 8b       	std	Y+16, r25	; 0x10
    1490:	8f 87       	std	Y+15, r24	; 0x0f
    1492:	8f 85       	ldd	r24, Y+15	; 0x0f
    1494:	98 89       	ldd	r25, Y+16	; 0x10
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <option_processing+0x474>
    149a:	98 8b       	std	Y+16, r25	; 0x10
    149c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x20, passEEPROM+4);  		/* Read PASS from the external EEPROM */
    149e:	2c e8       	ldi	r18, 0x8C	; 140
    14a0:	31 e0       	ldi	r19, 0x01	; 1
    14a2:	81 e3       	ldi	r24, 0x31	; 49
    14a4:	93 e0       	ldi	r25, 0x03	; 3
    14a6:	b9 01       	movw	r22, r18
    14a8:	0e 94 53 14 	call	0x28a6	; 0x28a6 <EEPROM_readByte>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a0 e2       	ldi	r26, 0x20	; 32
    14b2:	b1 e4       	ldi	r27, 0x41	; 65
    14b4:	8b 87       	std	Y+11, r24	; 0x0b
    14b6:	9c 87       	std	Y+12, r25	; 0x0c
    14b8:	ad 87       	std	Y+13, r26	; 0x0d
    14ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14be:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4a e7       	ldi	r20, 0x7A	; 122
    14ca:	53 e4       	ldi	r21, 0x43	; 67
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8f 83       	std	Y+7, r24	; 0x07
    14d6:	98 87       	std	Y+8, r25	; 0x08
    14d8:	a9 87       	std	Y+9, r26	; 0x09
    14da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14dc:	6f 81       	ldd	r22, Y+7	; 0x07
    14de:	78 85       	ldd	r23, Y+8	; 0x08
    14e0:	89 85       	ldd	r24, Y+9	; 0x09
    14e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <option_processing+0x4dc>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	3f c0       	rjmp	.+126    	; 0x157c <option_processing+0x55a>
	else if (__tmp > 65535)
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	3f ef       	ldi	r19, 0xFF	; 255
    150a:	4f e7       	ldi	r20, 0x7F	; 127
    150c:	57 e4       	ldi	r21, 0x47	; 71
    150e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1512:	18 16       	cp	r1, r24
    1514:	4c f5       	brge	.+82     	; 0x1568 <option_processing+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e2       	ldi	r20, 0x20	; 32
    1524:	51 e4       	ldi	r21, 0x41	; 65
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	0f c0       	rjmp	.+30     	; 0x155e <option_processing+0x53c>
    1540:	89 e1       	ldi	r24, 0x19	; 25
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9c 83       	std	Y+4, r25	; 0x04
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <option_processing+0x52a>
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	69 f7       	brne	.-38     	; 0x1540 <option_processing+0x51e>
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <option_processing+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	9a 81       	ldd	r25, Y+2	; 0x02
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <option_processing+0x566>
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			for(counter = 0; counter< PASSWORD_SIZE; counter++)
    1590:	10 92 7b 01 	sts	0x017B, r1
    1594:	12 c0       	rjmp	.+36     	; 0x15ba <option_processing+0x598>
			{
				if(check_pass[0] == passEEPROM[0] ){					// Check if password is correct
    1596:	90 91 8f 01 	lds	r25, 0x018F
    159a:	80 91 88 01 	lds	r24, 0x0188
    159e:	98 17       	cp	r25, r24
    15a0:	49 f4       	brne	.+18     	; 0x15b4 <option_processing+0x592>
					eeprom_match = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	80 93 87 01 	sts	0x0187, r24
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x18, passEEPROM+3);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x20, passEEPROM+4);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			for(counter = 0; counter< PASSWORD_SIZE; counter++)
    15a8:	80 91 7b 01 	lds	r24, 0x017B
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	80 93 7b 01 	sts	0x017B, r24
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <option_processing+0x598>
			{
				if(check_pass[0] == passEEPROM[0] ){					// Check if password is correct
					eeprom_match = 1;
				}else{
					eeprom_match = 0;
    15b4:	10 92 87 01 	sts	0x0187, r1
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <option_processing+0x5a0>
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x18, passEEPROM+3);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			EEPROM_readByte(PASS_ADDRESS+0x20, passEEPROM+4);  		/* Read PASS from the external EEPROM */
			_delay_ms(10);
			for(counter = 0; counter< PASSWORD_SIZE; counter++)
    15ba:	80 91 7b 01 	lds	r24, 0x017B
    15be:	85 30       	cpi	r24, 0x05	; 5
    15c0:	50 f3       	brcs	.-44     	; 0x1596 <option_processing+0x574>
				}else{
					eeprom_match = 0;
					break;
				}
			}
			UART_sendByte(CHECK);					//Send CHECK instruction to HMI_ECU
    15c2:	85 e0       	ldi	r24, 0x05	; 5
    15c4:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
			while(UART_recieveByte()!= UART1_READY){}	//Wait for HMI_ECU to be ready
    15c8:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <option_processing+0x5a6>
			UART_sendByte(eeprom_match);			//Send the result of whether the password entered matches EEPROM Pass
    15d0:	80 91 87 01 	lds	r24, 0x0187
    15d4:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
			if(eeprom_match == 0){
    15d8:	80 91 87 01 	lds	r24, 0x0187
    15dc:	88 23       	and	r24, r24
    15de:	29 f4       	brne	.+10     	; 0x15ea <option_processing+0x5c8>
				pass_error++;						//Increment error value (Error limit = 3)
    15e0:	80 91 95 01 	lds	r24, 0x0195
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	80 93 95 01 	sts	0x0195, r24
	while(UART_recieveByte()!= OPTION){}	// Wait for option instruction
	UART_sendByte(UART2_READY);				// Send ready to receive the option
	option = UART_recieveByte();			// Store the option
	if(option == '+' || option == '-')
	{
		while(eeprom_match == 0 && pass_error < MAX_NUM_OF_MISTAKES )
    15ea:	80 91 87 01 	lds	r24, 0x0187
    15ee:	88 23       	and	r24, r24
    15f0:	29 f4       	brne	.+10     	; 0x15fc <option_processing+0x5da>
    15f2:	80 91 95 01 	lds	r24, 0x0195
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	08 f4       	brcc	.+2      	; 0x15fc <option_processing+0x5da>
    15fa:	38 cd       	rjmp	.-1424   	; 0x106c <option_processing+0x4a>
			if(eeprom_match == 0){
				pass_error++;						//Increment error value (Error limit = 3)
			}
		}
	}
}
    15fc:	ca 5b       	subi	r28, 0xBA	; 186
    15fe:	df 4f       	sbci	r29, 0xFF	; 255
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	08 95       	ret

00001614 <create_password>:

void create_password(void)
{
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!= PASS_READY){}	/****	Wait for PASS_READY instruction  ****/
    1620:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	e1 f7       	brne	.-8      	; 0x1620 <create_password+0xc>
	UART_sendByte(UART2_READY);					/****	Send READY	instruction to HMI_ECU to receive PASSWORD	****/
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
	for(counter=0; counter< PASSWORD_SIZE; counter++)
    162e:	10 92 7b 01 	sts	0x017B, r1
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <create_password+0x3e>
	{
		pass[counter] = UART_recieveByte();		/**** Receive PASSWORD form HMI_ECU	****/
    1634:	80 91 7b 01 	lds	r24, 0x017B
    1638:	08 2f       	mov	r16, r24
    163a:	10 e0       	ldi	r17, 0x00	; 0
    163c:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    1640:	f8 01       	movw	r30, r16
    1642:	e3 58       	subi	r30, 0x83	; 131
    1644:	fe 4f       	sbci	r31, 0xFE	; 254
    1646:	80 83       	st	Z, r24

void create_password(void)
{
	while(UART_recieveByte()!= PASS_READY){}	/****	Wait for PASS_READY instruction  ****/
	UART_sendByte(UART2_READY);					/****	Send READY	instruction to HMI_ECU to receive PASSWORD	****/
	for(counter=0; counter< PASSWORD_SIZE; counter++)
    1648:	80 91 7b 01 	lds	r24, 0x017B
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	80 93 7b 01 	sts	0x017B, r24
    1652:	80 91 7b 01 	lds	r24, 0x017B
    1656:	85 30       	cpi	r24, 0x05	; 5
    1658:	68 f3       	brcs	.-38     	; 0x1634 <create_password+0x20>
	{
		pass[counter] = UART_recieveByte();		/**** Receive PASSWORD form HMI_ECU	****/
	}

	while(UART_recieveByte()!= CONFIRM_READY){}	/****	Wait for CONFIRM_READY instruction  ****/
    165a:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	e1 f7       	brne	.-8      	; 0x165a <create_password+0x46>
	UART_sendByte(UART2_READY);					/****	Send READY	instruction to HMI_ECU to receive the CONFIRM_PASS	****/
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
	for(counter=0; counter < PASSWORD_SIZE; counter++)
    1668:	10 92 7b 01 	sts	0x017B, r1
    166c:	0f c0       	rjmp	.+30     	; 0x168c <create_password+0x78>
	{
		confirm[counter] = UART_recieveByte();
    166e:	80 91 7b 01 	lds	r24, 0x017B
    1672:	08 2f       	mov	r16, r24
    1674:	10 e0       	ldi	r17, 0x00	; 0
    1676:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    167a:	f8 01       	movw	r30, r16
    167c:	ee 57       	subi	r30, 0x7E	; 126
    167e:	fe 4f       	sbci	r31, 0xFE	; 254
    1680:	80 83       	st	Z, r24
		pass[counter] = UART_recieveByte();		/**** Receive PASSWORD form HMI_ECU	****/
	}

	while(UART_recieveByte()!= CONFIRM_READY){}	/****	Wait for CONFIRM_READY instruction  ****/
	UART_sendByte(UART2_READY);					/****	Send READY	instruction to HMI_ECU to receive the CONFIRM_PASS	****/
	for(counter=0; counter < PASSWORD_SIZE; counter++)
    1682:	80 91 7b 01 	lds	r24, 0x017B
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	80 93 7b 01 	sts	0x017B, r24
    168c:	80 91 7b 01 	lds	r24, 0x017B
    1690:	85 30       	cpi	r24, 0x05	; 5
    1692:	68 f3       	brcs	.-38     	; 0x166e <create_password+0x5a>
	{
		confirm[counter] = UART_recieveByte();
	}

	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    1694:	10 92 7b 01 	sts	0x017B, r1
    1698:	1e c0       	rjmp	.+60     	; 0x16d6 <create_password+0xc2>
	{
		if(pass[counter] == confirm[counter]){	//Compare between PASSWORD and CONFIRMATION PASSWORD
    169a:	80 91 7b 01 	lds	r24, 0x017B
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	fc 01       	movw	r30, r24
    16a4:	e3 58       	subi	r30, 0x83	; 131
    16a6:	fe 4f       	sbci	r31, 0xFE	; 254
    16a8:	20 81       	ld	r18, Z
    16aa:	80 91 7b 01 	lds	r24, 0x017B
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	fc 01       	movw	r30, r24
    16b4:	ee 57       	subi	r30, 0x7E	; 126
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	80 81       	ld	r24, Z
    16ba:	28 17       	cp	r18, r24
    16bc:	49 f4       	brne	.+18     	; 0x16d0 <create_password+0xbc>
			matching = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	80 93 7c 01 	sts	0x017C, r24
	for(counter=0; counter < PASSWORD_SIZE; counter++)
	{
		confirm[counter] = UART_recieveByte();
	}

	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    16c4:	80 91 7b 01 	lds	r24, 0x017B
    16c8:	8f 5f       	subi	r24, 0xFF	; 255
    16ca:	80 93 7b 01 	sts	0x017B, r24
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <create_password+0xc2>
	{
		if(pass[counter] == confirm[counter]){	//Compare between PASSWORD and CONFIRMATION PASSWORD
			matching = 1;
		}
		else{
			matching = 0;
    16d0:	10 92 7c 01 	sts	0x017C, r1
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <create_password+0xca>
	for(counter=0; counter < PASSWORD_SIZE; counter++)
	{
		confirm[counter] = UART_recieveByte();
	}

	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    16d6:	80 91 7b 01 	lds	r24, 0x017B
    16da:	85 30       	cpi	r24, 0x05	; 5
    16dc:	f0 f2       	brcs	.-68     	; 0x169a <create_password+0x86>
		else{
			matching = 0;
			break;
		}
	}
}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <EEPROM_WRITE_PASS>:

void EEPROM_WRITE_PASS(uint8 arr[])
{
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	c8 54       	subi	r28, 0x48	; 72
    16f6:	d0 40       	sbci	r29, 0x00	; 0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	fe 01       	movw	r30, r28
    1704:	e9 5b       	subi	r30, 0xB9	; 185
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
	/* To save each integer of the password in the EEPROM */
	EEPROM_writeByte(PASS_ADDRESS	, pass[0]);  		/* Write PASS in the external EEPROM */
    170c:	20 91 7d 01 	lds	r18, 0x017D
    1710:	81 e1       	ldi	r24, 0x11	; 17
    1712:	93 e0       	ldi	r25, 0x03	; 3
    1714:	62 2f       	mov	r22, r18
    1716:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    171a:	fe 01       	movw	r30, r28
    171c:	ed 5b       	subi	r30, 0xBD	; 189
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a0 e2       	ldi	r26, 0x20	; 32
    1726:	b1 e4       	ldi	r27, 0x41	; 65
    1728:	80 83       	st	Z, r24
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	a2 83       	std	Z+2, r26	; 0x02
    172e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1730:	8e 01       	movw	r16, r28
    1732:	01 5c       	subi	r16, 0xC1	; 193
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	ed 5b       	subi	r30, 0xBD	; 189
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a e7       	ldi	r20, 0x7A	; 122
    174a:	53 e4       	ldi	r21, 0x43	; 67
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	f8 01       	movw	r30, r16
    1756:	80 83       	st	Z, r24
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    175e:	fe 01       	movw	r30, r28
    1760:	ff 96       	adiw	r30, 0x3f	; 63
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <EEPROM_WRITE_PASS+0x9c>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9e af       	std	Y+62, r25	; 0x3e
    1780:	8d af       	std	Y+61, r24	; 0x3d
    1782:	46 c0       	rjmp	.+140    	; 0x1810 <EEPROM_WRITE_PASS+0x128>
	else if (__tmp > 65535)
    1784:	fe 01       	movw	r30, r28
    1786:	ff 96       	adiw	r30, 0x3f	; 63
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	3f ef       	ldi	r19, 0xFF	; 255
    1794:	4f e7       	ldi	r20, 0x7F	; 127
    1796:	57 e4       	ldi	r21, 0x47	; 71
    1798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    179c:	18 16       	cp	r1, r24
    179e:	64 f5       	brge	.+88     	; 0x17f8 <EEPROM_WRITE_PASS+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a0:	fe 01       	movw	r30, r28
    17a2:	ed 5b       	subi	r30, 0xBD	; 189
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9e af       	std	Y+62, r25	; 0x3e
    17cc:	8d af       	std	Y+61, r24	; 0x3d
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <EEPROM_WRITE_PASS+0x106>
    17d0:	89 e1       	ldi	r24, 0x19	; 25
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9c af       	std	Y+60, r25	; 0x3c
    17d6:	8b af       	std	Y+59, r24	; 0x3b
    17d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    17da:	9c ad       	ldd	r25, Y+60	; 0x3c
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <EEPROM_WRITE_PASS+0xf4>
    17e0:	9c af       	std	Y+60, r25	; 0x3c
    17e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9e af       	std	Y+62, r25	; 0x3e
    17ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    17f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <EEPROM_WRITE_PASS+0xe8>
    17f6:	16 c0       	rjmp	.+44     	; 0x1824 <EEPROM_WRITE_PASS+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	fe 01       	movw	r30, r28
    17fa:	ff 96       	adiw	r30, 0x3f	; 63
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9e af       	std	Y+62, r25	; 0x3e
    180e:	8d af       	std	Y+61, r24	; 0x3d
    1810:	8d ad       	ldd	r24, Y+61	; 0x3d
    1812:	9e ad       	ldd	r25, Y+62	; 0x3e
    1814:	9a af       	std	Y+58, r25	; 0x3a
    1816:	89 af       	std	Y+57, r24	; 0x39
    1818:	89 ad       	ldd	r24, Y+57	; 0x39
    181a:	9a ad       	ldd	r25, Y+58	; 0x3a
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <EEPROM_WRITE_PASS+0x134>
    1820:	9a af       	std	Y+58, r25	; 0x3a
    1822:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x8, pass[1]);  		/* Write PASS in the external EEPROM */
    1824:	20 91 7e 01 	lds	r18, 0x017E
    1828:	89 e1       	ldi	r24, 0x19	; 25
    182a:	93 e0       	ldi	r25, 0x03	; 3
    182c:	62 2f       	mov	r22, r18
    182e:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e2       	ldi	r26, 0x20	; 32
    1838:	b1 e4       	ldi	r27, 0x41	; 65
    183a:	8d ab       	std	Y+53, r24	; 0x35
    183c:	9e ab       	std	Y+54, r25	; 0x36
    183e:	af ab       	std	Y+55, r26	; 0x37
    1840:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6d a9       	ldd	r22, Y+53	; 0x35
    1844:	7e a9       	ldd	r23, Y+54	; 0x36
    1846:	8f a9       	ldd	r24, Y+55	; 0x37
    1848:	98 ad       	ldd	r25, Y+56	; 0x38
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a e7       	ldi	r20, 0x7A	; 122
    1850:	53 e4       	ldi	r21, 0x43	; 67
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	89 ab       	std	Y+49, r24	; 0x31
    185c:	9a ab       	std	Y+50, r25	; 0x32
    185e:	ab ab       	std	Y+51, r26	; 0x33
    1860:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1862:	69 a9       	ldd	r22, Y+49	; 0x31
    1864:	7a a9       	ldd	r23, Y+50	; 0x32
    1866:	8b a9       	ldd	r24, Y+51	; 0x33
    1868:	9c a9       	ldd	r25, Y+52	; 0x34
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <EEPROM_WRITE_PASS+0x19c>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	98 ab       	std	Y+48, r25	; 0x30
    1880:	8f a7       	std	Y+47, r24	; 0x2f
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <EEPROM_WRITE_PASS+0x21a>
	else if (__tmp > 65535)
    1884:	69 a9       	ldd	r22, Y+49	; 0x31
    1886:	7a a9       	ldd	r23, Y+50	; 0x32
    1888:	8b a9       	ldd	r24, Y+51	; 0x33
    188a:	9c a9       	ldd	r25, Y+52	; 0x34
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <EEPROM_WRITE_PASS+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6d a9       	ldd	r22, Y+53	; 0x35
    189e:	7e a9       	ldd	r23, Y+54	; 0x36
    18a0:	8f a9       	ldd	r24, Y+55	; 0x37
    18a2:	98 ad       	ldd	r25, Y+56	; 0x38
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	98 ab       	std	Y+48, r25	; 0x30
    18c2:	8f a7       	std	Y+47, r24	; 0x2f
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <EEPROM_WRITE_PASS+0x1fc>
    18c6:	89 e1       	ldi	r24, 0x19	; 25
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9e a7       	std	Y+46, r25	; 0x2e
    18cc:	8d a7       	std	Y+45, r24	; 0x2d
    18ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    18d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <EEPROM_WRITE_PASS+0x1ea>
    18d6:	9e a7       	std	Y+46, r25	; 0x2e
    18d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8f a5       	ldd	r24, Y+47	; 0x2f
    18dc:	98 a9       	ldd	r25, Y+48	; 0x30
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	98 ab       	std	Y+48, r25	; 0x30
    18e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e6:	98 a9       	ldd	r25, Y+48	; 0x30
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <EEPROM_WRITE_PASS+0x1de>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <EEPROM_WRITE_PASS+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	69 a9       	ldd	r22, Y+49	; 0x31
    18f0:	7a a9       	ldd	r23, Y+50	; 0x32
    18f2:	8b a9       	ldd	r24, Y+51	; 0x33
    18f4:	9c a9       	ldd	r25, Y+52	; 0x34
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	98 ab       	std	Y+48, r25	; 0x30
    1900:	8f a7       	std	Y+47, r24	; 0x2f
    1902:	8f a5       	ldd	r24, Y+47	; 0x2f
    1904:	98 a9       	ldd	r25, Y+48	; 0x30
    1906:	9c a7       	std	Y+44, r25	; 0x2c
    1908:	8b a7       	std	Y+43, r24	; 0x2b
    190a:	8b a5       	ldd	r24, Y+43	; 0x2b
    190c:	9c a5       	ldd	r25, Y+44	; 0x2c
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <EEPROM_WRITE_PASS+0x226>
    1912:	9c a7       	std	Y+44, r25	; 0x2c
    1914:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x10, pass[2]);  		/* Write PASS in the external EEPROM */
    1916:	20 91 7f 01 	lds	r18, 0x017F
    191a:	81 e2       	ldi	r24, 0x21	; 33
    191c:	93 e0       	ldi	r25, 0x03	; 3
    191e:	62 2f       	mov	r22, r18
    1920:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e2       	ldi	r26, 0x20	; 32
    192a:	b1 e4       	ldi	r27, 0x41	; 65
    192c:	8f a3       	std	Y+39, r24	; 0x27
    192e:	98 a7       	std	Y+40, r25	; 0x28
    1930:	a9 a7       	std	Y+41, r26	; 0x29
    1932:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1934:	6f a1       	ldd	r22, Y+39	; 0x27
    1936:	78 a5       	ldd	r23, Y+40	; 0x28
    1938:	89 a5       	ldd	r24, Y+41	; 0x29
    193a:	9a a5       	ldd	r25, Y+42	; 0x2a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a e7       	ldi	r20, 0x7A	; 122
    1942:	53 e4       	ldi	r21, 0x43	; 67
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8b a3       	std	Y+35, r24	; 0x23
    194e:	9c a3       	std	Y+36, r25	; 0x24
    1950:	ad a3       	std	Y+37, r26	; 0x25
    1952:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1954:	6b a1       	ldd	r22, Y+35	; 0x23
    1956:	7c a1       	ldd	r23, Y+36	; 0x24
    1958:	8d a1       	ldd	r24, Y+37	; 0x25
    195a:	9e a1       	ldd	r25, Y+38	; 0x26
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	2c f4       	brge	.+10     	; 0x1976 <EEPROM_WRITE_PASS+0x28e>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9a a3       	std	Y+34, r25	; 0x22
    1972:	89 a3       	std	Y+33, r24	; 0x21
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <EEPROM_WRITE_PASS+0x30c>
	else if (__tmp > 65535)
    1976:	6b a1       	ldd	r22, Y+35	; 0x23
    1978:	7c a1       	ldd	r23, Y+36	; 0x24
    197a:	8d a1       	ldd	r24, Y+37	; 0x25
    197c:	9e a1       	ldd	r25, Y+38	; 0x26
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	3f ef       	ldi	r19, 0xFF	; 255
    1982:	4f e7       	ldi	r20, 0x7F	; 127
    1984:	57 e4       	ldi	r21, 0x47	; 71
    1986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    198a:	18 16       	cp	r1, r24
    198c:	4c f5       	brge	.+82     	; 0x19e0 <EEPROM_WRITE_PASS+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198e:	6f a1       	ldd	r22, Y+39	; 0x27
    1990:	78 a5       	ldd	r23, Y+40	; 0x28
    1992:	89 a5       	ldd	r24, Y+41	; 0x29
    1994:	9a a5       	ldd	r25, Y+42	; 0x2a
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	51 e4       	ldi	r21, 0x41	; 65
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9a a3       	std	Y+34, r25	; 0x22
    19b4:	89 a3       	std	Y+33, r24	; 0x21
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <EEPROM_WRITE_PASS+0x2ee>
    19b8:	89 e1       	ldi	r24, 0x19	; 25
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	98 a3       	std	Y+32, r25	; 0x20
    19be:	8f 8f       	std	Y+31, r24	; 0x1f
    19c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19c2:	98 a1       	ldd	r25, Y+32	; 0x20
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <EEPROM_WRITE_PASS+0x2dc>
    19c8:	98 a3       	std	Y+32, r25	; 0x20
    19ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	89 a1       	ldd	r24, Y+33	; 0x21
    19ce:	9a a1       	ldd	r25, Y+34	; 0x22
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	9a a3       	std	Y+34, r25	; 0x22
    19d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	89 a1       	ldd	r24, Y+33	; 0x21
    19d8:	9a a1       	ldd	r25, Y+34	; 0x22
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	69 f7       	brne	.-38     	; 0x19b8 <EEPROM_WRITE_PASS+0x2d0>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <EEPROM_WRITE_PASS+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e0:	6b a1       	ldd	r22, Y+35	; 0x23
    19e2:	7c a1       	ldd	r23, Y+36	; 0x24
    19e4:	8d a1       	ldd	r24, Y+37	; 0x25
    19e6:	9e a1       	ldd	r25, Y+38	; 0x26
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9a a3       	std	Y+34, r25	; 0x22
    19f2:	89 a3       	std	Y+33, r24	; 0x21
    19f4:	89 a1       	ldd	r24, Y+33	; 0x21
    19f6:	9a a1       	ldd	r25, Y+34	; 0x22
    19f8:	9e 8f       	std	Y+30, r25	; 0x1e
    19fa:	8d 8f       	std	Y+29, r24	; 0x1d
    19fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <EEPROM_WRITE_PASS+0x318>
    1a04:	9e 8f       	std	Y+30, r25	; 0x1e
    1a06:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x18, pass[3]);  		/* Write PASS in the external EEPROM */
    1a08:	20 91 80 01 	lds	r18, 0x0180
    1a0c:	89 e2       	ldi	r24, 0x29	; 41
    1a0e:	93 e0       	ldi	r25, 0x03	; 3
    1a10:	62 2f       	mov	r22, r18
    1a12:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 e2       	ldi	r26, 0x20	; 32
    1a1c:	b1 e4       	ldi	r27, 0x41	; 65
    1a1e:	89 8f       	std	Y+25, r24	; 0x19
    1a20:	9a 8f       	std	Y+26, r25	; 0x1a
    1a22:	ab 8f       	std	Y+27, r26	; 0x1b
    1a24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	69 8d       	ldd	r22, Y+25	; 0x19
    1a28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a e7       	ldi	r20, 0x7A	; 122
    1a34:	53 e4       	ldi	r21, 0x43	; 67
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8d 8b       	std	Y+21, r24	; 0x15
    1a40:	9e 8b       	std	Y+22, r25	; 0x16
    1a42:	af 8b       	std	Y+23, r26	; 0x17
    1a44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a46:	6d 89       	ldd	r22, Y+21	; 0x15
    1a48:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <EEPROM_WRITE_PASS+0x380>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9c 8b       	std	Y+20, r25	; 0x14
    1a64:	8b 8b       	std	Y+19, r24	; 0x13
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <EEPROM_WRITE_PASS+0x3fe>
	else if (__tmp > 65535)
    1a68:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <EEPROM_WRITE_PASS+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	69 8d       	ldd	r22, Y+25	; 0x19
    1a82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <EEPROM_WRITE_PASS+0x3e0>
    1aaa:	89 e1       	ldi	r24, 0x19	; 25
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9a 8b       	std	Y+18, r25	; 0x12
    1ab0:	89 8b       	std	Y+17, r24	; 0x11
    1ab2:	89 89       	ldd	r24, Y+17	; 0x11
    1ab4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <EEPROM_WRITE_PASS+0x3ce>
    1aba:	9a 8b       	std	Y+18, r25	; 0x12
    1abc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9c 8b       	std	Y+20, r25	; 0x14
    1ac6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <EEPROM_WRITE_PASS+0x3c2>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <EEPROM_WRITE_PASS+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9c 8b       	std	Y+20, r25	; 0x14
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
    1ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aea:	98 8b       	std	Y+16, r25	; 0x10
    1aec:	8f 87       	std	Y+15, r24	; 0x0f
    1aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af0:	98 89       	ldd	r25, Y+16	; 0x10
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <EEPROM_WRITE_PASS+0x40a>
    1af6:	98 8b       	std	Y+16, r25	; 0x10
    1af8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_writeByte(PASS_ADDRESS+0x20, pass[4]);  		/* Write PASS in the external EEPROM */
    1afa:	20 91 81 01 	lds	r18, 0x0181
    1afe:	81 e3       	ldi	r24, 0x31	; 49
    1b00:	93 e0       	ldi	r25, 0x03	; 3
    1b02:	62 2f       	mov	r22, r18
    1b04:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e2       	ldi	r26, 0x20	; 32
    1b0e:	b1 e4       	ldi	r27, 0x41	; 65
    1b10:	8b 87       	std	Y+11, r24	; 0x0b
    1b12:	9c 87       	std	Y+12, r25	; 0x0c
    1b14:	ad 87       	std	Y+13, r26	; 0x0d
    1b16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a e7       	ldi	r20, 0x7A	; 122
    1b26:	53 e4       	ldi	r21, 0x43	; 67
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8f 83       	std	Y+7, r24	; 0x07
    1b32:	98 87       	std	Y+8, r25	; 0x08
    1b34:	a9 87       	std	Y+9, r26	; 0x09
    1b36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <EEPROM_WRITE_PASS+0x472>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <EEPROM_WRITE_PASS+0x4f0>
	else if (__tmp > 65535)
    1b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5c:	78 85       	ldd	r23, Y+8	; 0x08
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <EEPROM_WRITE_PASS+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <EEPROM_WRITE_PASS+0x4d2>
    1b9c:	89 e1       	ldi	r24, 0x19	; 25
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <EEPROM_WRITE_PASS+0x4c0>
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <EEPROM_WRITE_PASS+0x4b4>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <EEPROM_WRITE_PASS+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc6:	78 85       	ldd	r23, Y+8	; 0x08
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <EEPROM_WRITE_PASS+0x4fc>
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1bec:	c8 5b       	subi	r28, 0xB8	; 184
    1bee:	df 4f       	sbci	r29, 0xFF	; 255
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <EEPROM_WRITE_CONFRIM>:
void EEPROM_WRITE_CONFRIM(uint8 arr[])
{
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	c8 54       	subi	r28, 0x48	; 72
    1c12:	d0 40       	sbci	r29, 0x00	; 0
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e9 5b       	subi	r30, 0xB9	; 185
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
	EEPROM_writeByte(RECONFIRM_ADDRESS	, pass[0]);  		/* Write PASS in the external EEPROM */
    1c28:	20 91 7d 01 	lds	r18, 0x017D
    1c2c:	89 e3       	ldi	r24, 0x39	; 57
    1c2e:	93 e0       	ldi	r25, 0x03	; 3
    1c30:	62 2f       	mov	r22, r18
    1c32:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    1c36:	fe 01       	movw	r30, r28
    1c38:	ed 5b       	subi	r30, 0xBD	; 189
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e2       	ldi	r26, 0x20	; 32
    1c42:	b1 e4       	ldi	r27, 0x41	; 65
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4c:	8e 01       	movw	r16, r28
    1c4e:	01 5c       	subi	r16, 0xC1	; 193
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	fe 01       	movw	r30, r28
    1c54:	ed 5b       	subi	r30, 0xBD	; 189
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	53 e4       	ldi	r21, 0x43	; 67
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f8 01       	movw	r30, r16
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ff 96       	adiw	r30, 0x3f	; 63
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <EEPROM_WRITE_CONFRIM+0x9c>
		__ticks = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9e af       	std	Y+62, r25	; 0x3e
    1c9c:	8d af       	std	Y+61, r24	; 0x3d
    1c9e:	46 c0       	rjmp	.+140    	; 0x1d2c <EEPROM_WRITE_CONFRIM+0x128>
	else if (__tmp > 65535)
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ff 96       	adiw	r30, 0x3f	; 63
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	64 f5       	brge	.+88     	; 0x1d14 <EEPROM_WRITE_CONFRIM+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	ed 5b       	subi	r30, 0xBD	; 189
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9e af       	std	Y+62, r25	; 0x3e
    1ce8:	8d af       	std	Y+61, r24	; 0x3d
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <EEPROM_WRITE_CONFRIM+0x106>
    1cec:	89 e1       	ldi	r24, 0x19	; 25
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c af       	std	Y+60, r25	; 0x3c
    1cf2:	8b af       	std	Y+59, r24	; 0x3b
    1cf4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cf6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <EEPROM_WRITE_CONFRIM+0xf4>
    1cfc:	9c af       	std	Y+60, r25	; 0x3c
    1cfe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9e af       	std	Y+62, r25	; 0x3e
    1d08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <EEPROM_WRITE_CONFRIM+0xe8>
    1d12:	16 c0       	rjmp	.+44     	; 0x1d40 <EEPROM_WRITE_CONFRIM+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	fe 01       	movw	r30, r28
    1d16:	ff 96       	adiw	r30, 0x3f	; 63
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e af       	std	Y+62, r25	; 0x3e
    1d2a:	8d af       	std	Y+61, r24	; 0x3d
    1d2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d30:	9a af       	std	Y+58, r25	; 0x3a
    1d32:	89 af       	std	Y+57, r24	; 0x39
    1d34:	89 ad       	ldd	r24, Y+57	; 0x39
    1d36:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <EEPROM_WRITE_CONFRIM+0x134>
    1d3c:	9a af       	std	Y+58, r25	; 0x3a
    1d3e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+ 0x8, pass[1]);  		/* Write PASS in the external EEPROM */
    1d40:	20 91 7e 01 	lds	r18, 0x017E
    1d44:	81 e4       	ldi	r24, 0x41	; 65
    1d46:	93 e0       	ldi	r25, 0x03	; 3
    1d48:	62 2f       	mov	r22, r18
    1d4a:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e2       	ldi	r26, 0x20	; 32
    1d54:	b1 e4       	ldi	r27, 0x41	; 65
    1d56:	8d ab       	std	Y+53, r24	; 0x35
    1d58:	9e ab       	std	Y+54, r25	; 0x36
    1d5a:	af ab       	std	Y+55, r26	; 0x37
    1d5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d60:	7e a9       	ldd	r23, Y+54	; 0x36
    1d62:	8f a9       	ldd	r24, Y+55	; 0x37
    1d64:	98 ad       	ldd	r25, Y+56	; 0x38
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a e7       	ldi	r20, 0x7A	; 122
    1d6c:	53 e4       	ldi	r21, 0x43	; 67
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	89 ab       	std	Y+49, r24	; 0x31
    1d78:	9a ab       	std	Y+50, r25	; 0x32
    1d7a:	ab ab       	std	Y+51, r26	; 0x33
    1d7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d80:	7a a9       	ldd	r23, Y+50	; 0x32
    1d82:	8b a9       	ldd	r24, Y+51	; 0x33
    1d84:	9c a9       	ldd	r25, Y+52	; 0x34
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <EEPROM_WRITE_CONFRIM+0x19c>
		__ticks = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	98 ab       	std	Y+48, r25	; 0x30
    1d9c:	8f a7       	std	Y+47, r24	; 0x2f
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <EEPROM_WRITE_CONFRIM+0x21a>
	else if (__tmp > 65535)
    1da0:	69 a9       	ldd	r22, Y+49	; 0x31
    1da2:	7a a9       	ldd	r23, Y+50	; 0x32
    1da4:	8b a9       	ldd	r24, Y+51	; 0x33
    1da6:	9c a9       	ldd	r25, Y+52	; 0x34
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	4c f5       	brge	.+82     	; 0x1e0a <EEPROM_WRITE_CONFRIM+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dba:	7e a9       	ldd	r23, Y+54	; 0x36
    1dbc:	8f a9       	ldd	r24, Y+55	; 0x37
    1dbe:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	98 ab       	std	Y+48, r25	; 0x30
    1dde:	8f a7       	std	Y+47, r24	; 0x2f
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <EEPROM_WRITE_CONFRIM+0x1fc>
    1de2:	89 e1       	ldi	r24, 0x19	; 25
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9e a7       	std	Y+46, r25	; 0x2e
    1de8:	8d a7       	std	Y+45, r24	; 0x2d
    1dea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <EEPROM_WRITE_CONFRIM+0x1ea>
    1df2:	9e a7       	std	Y+46, r25	; 0x2e
    1df4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	98 ab       	std	Y+48, r25	; 0x30
    1dfe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e02:	98 a9       	ldd	r25, Y+48	; 0x30
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <EEPROM_WRITE_CONFRIM+0x1de>
    1e08:	14 c0       	rjmp	.+40     	; 0x1e32 <EEPROM_WRITE_CONFRIM+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e10:	9c a9       	ldd	r25, Y+52	; 0x34
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	98 ab       	std	Y+48, r25	; 0x30
    1e1c:	8f a7       	std	Y+47, r24	; 0x2f
    1e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e20:	98 a9       	ldd	r25, Y+48	; 0x30
    1e22:	9c a7       	std	Y+44, r25	; 0x2c
    1e24:	8b a7       	std	Y+43, r24	; 0x2b
    1e26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <EEPROM_WRITE_CONFRIM+0x226>
    1e2e:	9c a7       	std	Y+44, r25	; 0x2c
    1e30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x10, pass[2]);  		/* Write PASS in the external EEPROM */
    1e32:	20 91 7f 01 	lds	r18, 0x017F
    1e36:	89 e4       	ldi	r24, 0x49	; 73
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	62 2f       	mov	r22, r18
    1e3c:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e2       	ldi	r26, 0x20	; 32
    1e46:	b1 e4       	ldi	r27, 0x41	; 65
    1e48:	8f a3       	std	Y+39, r24	; 0x27
    1e4a:	98 a7       	std	Y+40, r25	; 0x28
    1e4c:	a9 a7       	std	Y+41, r26	; 0x29
    1e4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e50:	6f a1       	ldd	r22, Y+39	; 0x27
    1e52:	78 a5       	ldd	r23, Y+40	; 0x28
    1e54:	89 a5       	ldd	r24, Y+41	; 0x29
    1e56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	53 e4       	ldi	r21, 0x43	; 67
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8b a3       	std	Y+35, r24	; 0x23
    1e6a:	9c a3       	std	Y+36, r25	; 0x24
    1e6c:	ad a3       	std	Y+37, r26	; 0x25
    1e6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e70:	6b a1       	ldd	r22, Y+35	; 0x23
    1e72:	7c a1       	ldd	r23, Y+36	; 0x24
    1e74:	8d a1       	ldd	r24, Y+37	; 0x25
    1e76:	9e a1       	ldd	r25, Y+38	; 0x26
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <EEPROM_WRITE_CONFRIM+0x28e>
		__ticks = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9a a3       	std	Y+34, r25	; 0x22
    1e8e:	89 a3       	std	Y+33, r24	; 0x21
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <EEPROM_WRITE_CONFRIM+0x30c>
	else if (__tmp > 65535)
    1e92:	6b a1       	ldd	r22, Y+35	; 0x23
    1e94:	7c a1       	ldd	r23, Y+36	; 0x24
    1e96:	8d a1       	ldd	r24, Y+37	; 0x25
    1e98:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	4c f5       	brge	.+82     	; 0x1efc <EEPROM_WRITE_CONFRIM+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	6f a1       	ldd	r22, Y+39	; 0x27
    1eac:	78 a5       	ldd	r23, Y+40	; 0x28
    1eae:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9a a3       	std	Y+34, r25	; 0x22
    1ed0:	89 a3       	std	Y+33, r24	; 0x21
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <EEPROM_WRITE_CONFRIM+0x2ee>
    1ed4:	89 e1       	ldi	r24, 0x19	; 25
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	98 a3       	std	Y+32, r25	; 0x20
    1eda:	8f 8f       	std	Y+31, r24	; 0x1f
    1edc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ede:	98 a1       	ldd	r25, Y+32	; 0x20
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <EEPROM_WRITE_CONFRIM+0x2dc>
    1ee4:	98 a3       	std	Y+32, r25	; 0x20
    1ee6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eea:	9a a1       	ldd	r25, Y+34	; 0x22
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9a a3       	std	Y+34, r25	; 0x22
    1ef0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f7       	brne	.-38     	; 0x1ed4 <EEPROM_WRITE_CONFRIM+0x2d0>
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <EEPROM_WRITE_CONFRIM+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efc:	6b a1       	ldd	r22, Y+35	; 0x23
    1efe:	7c a1       	ldd	r23, Y+36	; 0x24
    1f00:	8d a1       	ldd	r24, Y+37	; 0x25
    1f02:	9e a1       	ldd	r25, Y+38	; 0x26
    1f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9a a3       	std	Y+34, r25	; 0x22
    1f0e:	89 a3       	std	Y+33, r24	; 0x21
    1f10:	89 a1       	ldd	r24, Y+33	; 0x21
    1f12:	9a a1       	ldd	r25, Y+34	; 0x22
    1f14:	9e 8f       	std	Y+30, r25	; 0x1e
    1f16:	8d 8f       	std	Y+29, r24	; 0x1d
    1f18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <EEPROM_WRITE_CONFRIM+0x318>
    1f20:	9e 8f       	std	Y+30, r25	; 0x1e
    1f22:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x18, pass[3]);  		/* Write PASS in the external EEPROM */
    1f24:	20 91 80 01 	lds	r18, 0x0180
    1f28:	81 e5       	ldi	r24, 0x51	; 81
    1f2a:	93 e0       	ldi	r25, 0x03	; 3
    1f2c:	62 2f       	mov	r22, r18
    1f2e:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a0 e2       	ldi	r26, 0x20	; 32
    1f38:	b1 e4       	ldi	r27, 0x41	; 65
    1f3a:	89 8f       	std	Y+25, r24	; 0x19
    1f3c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f3e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	69 8d       	ldd	r22, Y+25	; 0x19
    1f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a e7       	ldi	r20, 0x7A	; 122
    1f50:	53 e4       	ldi	r21, 0x43	; 67
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8d 8b       	std	Y+21, r24	; 0x15
    1f5c:	9e 8b       	std	Y+22, r25	; 0x16
    1f5e:	af 8b       	std	Y+23, r26	; 0x17
    1f60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f62:	6d 89       	ldd	r22, Y+21	; 0x15
    1f64:	7e 89       	ldd	r23, Y+22	; 0x16
    1f66:	8f 89       	ldd	r24, Y+23	; 0x17
    1f68:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <EEPROM_WRITE_CONFRIM+0x380>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9c 8b       	std	Y+20, r25	; 0x14
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <EEPROM_WRITE_CONFRIM+0x3fe>
	else if (__tmp > 65535)
    1f84:	6d 89       	ldd	r22, Y+21	; 0x15
    1f86:	7e 89       	ldd	r23, Y+22	; 0x16
    1f88:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	4c f5       	brge	.+82     	; 0x1fee <EEPROM_WRITE_CONFRIM+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <EEPROM_WRITE_CONFRIM+0x3e0>
    1fc6:	89 e1       	ldi	r24, 0x19	; 25
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9a 8b       	std	Y+18, r25	; 0x12
    1fcc:	89 8b       	std	Y+17, r24	; 0x11
    1fce:	89 89       	ldd	r24, Y+17	; 0x11
    1fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <EEPROM_WRITE_CONFRIM+0x3ce>
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	8b 89       	ldd	r24, Y+19	; 0x13
    1fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <EEPROM_WRITE_CONFRIM+0x3c2>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <EEPROM_WRITE_CONFRIM+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	8b 89       	ldd	r24, Y+19	; 0x13
    2004:	9c 89       	ldd	r25, Y+20	; 0x14
    2006:	98 8b       	std	Y+16, r25	; 0x10
    2008:	8f 87       	std	Y+15, r24	; 0x0f
    200a:	8f 85       	ldd	r24, Y+15	; 0x0f
    200c:	98 89       	ldd	r25, Y+16	; 0x10
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <EEPROM_WRITE_CONFRIM+0x40a>
    2012:	98 8b       	std	Y+16, r25	; 0x10
    2014:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_writeByte(RECONFIRM_ADDRESS+0x20, pass[4]);  		/* Write PASS in the external EEPROM */
    2016:	20 91 81 01 	lds	r18, 0x0181
    201a:	89 e5       	ldi	r24, 0x59	; 89
    201c:	93 e0       	ldi	r25, 0x03	; 3
    201e:	62 2f       	mov	r22, r18
    2020:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_writeByte>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e2       	ldi	r26, 0x20	; 32
    202a:	b1 e4       	ldi	r27, 0x41	; 65
    202c:	8b 87       	std	Y+11, r24	; 0x0b
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	ad 87       	std	Y+13, r26	; 0x0d
    2032:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	53 e4       	ldi	r21, 0x43	; 67
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8f 83       	std	Y+7, r24	; 0x07
    204e:	98 87       	std	Y+8, r25	; 0x08
    2050:	a9 87       	std	Y+9, r26	; 0x09
    2052:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <EEPROM_WRITE_CONFRIM+0x472>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <EEPROM_WRITE_CONFRIM+0x4f0>
	else if (__tmp > 65535)
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <EEPROM_WRITE_CONFRIM+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <EEPROM_WRITE_CONFRIM+0x4d2>
    20b8:	89 e1       	ldi	r24, 0x19	; 25
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <EEPROM_WRITE_CONFRIM+0x4c0>
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <EEPROM_WRITE_CONFRIM+0x4b4>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <EEPROM_WRITE_CONFRIM+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <EEPROM_WRITE_CONFRIM+0x4fc>
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2108:	c8 5b       	subi	r28, 0xB8	; 184
    210a:	df 4f       	sbci	r29, 0xFF	; 255
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	08 95       	ret

00002120 <DcMotor_Init>:
#include "common_macros.h"
#include "DC_motor.h"
#include "gpio.h"

void DcMotor_Init(void)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORT_IN1, PIN_IN1, PIN_OUTPUT);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 b3 14 	call	0x2966	; 0x2966 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_IN2, PIN_IN2, PIN_OUTPUT);
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	0e 94 b3 14 	call	0x2966	; 0x2966 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_E, PIN_E, PIN_OUTPUT);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	63 e0       	ldi	r22, 0x03	; 3
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 b3 14 	call	0x2966	; 0x2966 <GPIO_setupPinDirection>

	GPIO_writePin(PORT_IN1, PIN_IN1, LOGIC_LOW);
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
	GPIO_writePin(PORT_IN2, PIN_IN2, LOGIC_LOW);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	61 e0       	ldi	r22, 0x01	; 1
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
    /* Motor is stop at the beginning */

}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	00 d0       	rcall	.+0      	; 0x2166 <DcMotor_Rotate+0x6>
    2166:	0f 92       	push	r0
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	3b 83       	std	Y+3, r19	; 0x03
    2176:	2a 83       	std	Y+2, r18	; 0x02
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	9b 81       	ldd	r25, Y+3	; 0x03
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	91 05       	cpc	r25, r1
    2180:	a1 f0       	breq	.+40     	; 0x21aa <DcMotor_Rotate+0x4a>
    2182:	2a 81       	ldd	r18, Y+2	; 0x02
    2184:	3b 81       	ldd	r19, Y+3	; 0x03
    2186:	22 30       	cpi	r18, 0x02	; 2
    2188:	31 05       	cpc	r19, r1
    218a:	d1 f0       	breq	.+52     	; 0x21c0 <DcMotor_Rotate+0x60>
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	9b 81       	ldd	r25, Y+3	; 0x03
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	01 f5       	brne	.+64     	; 0x21d4 <DcMotor_Rotate+0x74>
	{
	case CW:
	{
		GPIO_writePin(PORT_IN1, PIN_IN1, LOGIC_HIGH);
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
		GPIO_writePin(PORT_IN2, PIN_IN2, LOGIC_LOW);
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
    21a8:	15 c0       	rjmp	.+42     	; 0x21d4 <DcMotor_Rotate+0x74>
		break;
	}
	case A_CW:
	{
		GPIO_writePin(PORT_IN1, PIN_IN1, LOGIC_LOW);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
		GPIO_writePin(PORT_IN2, PIN_IN2, LOGIC_HIGH);
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
    21be:	0a c0       	rjmp	.+20     	; 0x21d4 <DcMotor_Rotate+0x74>
		break;
	}
	case STOP:
	{
		GPIO_writePin(PORT_IN1, PIN_IN1, LOGIC_LOW);
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
		GPIO_writePin(PORT_IN2, PIN_IN2, LOGIC_LOW);
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
		break;
	}

	}

}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    21e0:	1f 92       	push	r1
    21e2:	0f 92       	push	r0
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	0f 92       	push	r0
    21e8:	11 24       	eor	r1, r1
    21ea:	2f 93       	push	r18
    21ec:	3f 93       	push	r19
    21ee:	4f 93       	push	r20
    21f0:	5f 93       	push	r21
    21f2:	6f 93       	push	r22
    21f4:	7f 93       	push	r23
    21f6:	8f 93       	push	r24
    21f8:	9f 93       	push	r25
    21fa:	af 93       	push	r26
    21fc:	bf 93       	push	r27
    21fe:	ef 93       	push	r30
    2200:	ff 93       	push	r31
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBack_Ptr != NULL_PTR)
    220a:	80 91 98 01 	lds	r24, 0x0198
    220e:	90 91 99 01 	lds	r25, 0x0199
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	29 f0       	breq	.+10     	; 0x2220 <__vector_9+0x40>
	{
		(*g_timer1CallBack_Ptr)();
    2216:	e0 91 98 01 	lds	r30, 0x0198
    221a:	f0 91 99 01 	lds	r31, 0x0199
    221e:	09 95       	icall
	}
}
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	ff 91       	pop	r31
    2226:	ef 91       	pop	r30
    2228:	bf 91       	pop	r27
    222a:	af 91       	pop	r26
    222c:	9f 91       	pop	r25
    222e:	8f 91       	pop	r24
    2230:	7f 91       	pop	r23
    2232:	6f 91       	pop	r22
    2234:	5f 91       	pop	r21
    2236:	4f 91       	pop	r20
    2238:	3f 91       	pop	r19
    223a:	2f 91       	pop	r18
    223c:	0f 90       	pop	r0
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	0f 90       	pop	r0
    2242:	1f 90       	pop	r1
    2244:	18 95       	reti

00002246 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2246:	1f 92       	push	r1
    2248:	0f 92       	push	r0
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	0f 92       	push	r0
    224e:	11 24       	eor	r1, r1
    2250:	2f 93       	push	r18
    2252:	3f 93       	push	r19
    2254:	4f 93       	push	r20
    2256:	5f 93       	push	r21
    2258:	6f 93       	push	r22
    225a:	7f 93       	push	r23
    225c:	8f 93       	push	r24
    225e:	9f 93       	push	r25
    2260:	af 93       	push	r26
    2262:	bf 93       	push	r27
    2264:	ef 93       	push	r30
    2266:	ff 93       	push	r31
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBack_Ptr != NULL_PTR)
    2270:	80 91 98 01 	lds	r24, 0x0198
    2274:	90 91 99 01 	lds	r25, 0x0199
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	29 f0       	breq	.+10     	; 0x2286 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the event is detected */
		(*g_timer1CallBack_Ptr)();
    227c:	e0 91 98 01 	lds	r30, 0x0198
    2280:	f0 91 99 01 	lds	r31, 0x0199
    2284:	09 95       	icall
	}
}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	ff 91       	pop	r31
    228c:	ef 91       	pop	r30
    228e:	bf 91       	pop	r27
    2290:	af 91       	pop	r26
    2292:	9f 91       	pop	r25
    2294:	8f 91       	pop	r24
    2296:	7f 91       	pop	r23
    2298:	6f 91       	pop	r22
    229a:	5f 91       	pop	r21
    229c:	4f 91       	pop	r20
    229e:	3f 91       	pop	r19
    22a0:	2f 91       	pop	r18
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	0f 90       	pop	r0
    22a8:	1f 90       	pop	r1
    22aa:	18 95       	reti

000022ac <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    22ac:	1f 92       	push	r1
    22ae:	0f 92       	push	r0
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	0f 92       	push	r0
    22b4:	11 24       	eor	r1, r1
    22b6:	2f 93       	push	r18
    22b8:	3f 93       	push	r19
    22ba:	4f 93       	push	r20
    22bc:	5f 93       	push	r21
    22be:	6f 93       	push	r22
    22c0:	7f 93       	push	r23
    22c2:	8f 93       	push	r24
    22c4:	9f 93       	push	r25
    22c6:	af 93       	push	r26
    22c8:	bf 93       	push	r27
    22ca:	ef 93       	push	r30
    22cc:	ff 93       	push	r31
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBack_Ptr != NULL_PTR)
    22d6:	80 91 98 01 	lds	r24, 0x0198
    22da:	90 91 99 01 	lds	r25, 0x0199
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	29 f0       	breq	.+10     	; 0x22ec <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the event is detected */
		(*g_timer1CallBack_Ptr)();
    22e2:	e0 91 98 01 	lds	r30, 0x0198
    22e6:	f0 91 99 01 	lds	r31, 0x0199
    22ea:	09 95       	icall
	}
}
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	ff 91       	pop	r31
    22f2:	ef 91       	pop	r30
    22f4:	bf 91       	pop	r27
    22f6:	af 91       	pop	r26
    22f8:	9f 91       	pop	r25
    22fa:	8f 91       	pop	r24
    22fc:	7f 91       	pop	r23
    22fe:	6f 91       	pop	r22
    2300:	5f 91       	pop	r21
    2302:	4f 91       	pop	r20
    2304:	3f 91       	pop	r19
    2306:	2f 91       	pop	r18
    2308:	0f 90       	pop	r0
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	0f 90       	pop	r0
    230e:	1f 90       	pop	r1
    2310:	18 95       	reti

00002312 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2312:	1f 92       	push	r1
    2314:	0f 92       	push	r0
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	0f 92       	push	r0
    231a:	11 24       	eor	r1, r1
    231c:	2f 93       	push	r18
    231e:	3f 93       	push	r19
    2320:	4f 93       	push	r20
    2322:	5f 93       	push	r21
    2324:	6f 93       	push	r22
    2326:	7f 93       	push	r23
    2328:	8f 93       	push	r24
    232a:	9f 93       	push	r25
    232c:	af 93       	push	r26
    232e:	bf 93       	push	r27
    2330:	ef 93       	push	r30
    2332:	ff 93       	push	r31
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBack_Ptr != NULL_PTR)
    233c:	80 91 96 01 	lds	r24, 0x0196
    2340:	90 91 97 01 	lds	r25, 0x0197
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	29 f0       	breq	.+10     	; 0x2352 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the event is detected */
		(*g_timer0CallBack_Ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2348:	e0 91 96 01 	lds	r30, 0x0196
    234c:	f0 91 97 01 	lds	r31, 0x0197
    2350:	09 95       	icall
	}
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	ff 91       	pop	r31
    2358:	ef 91       	pop	r30
    235a:	bf 91       	pop	r27
    235c:	af 91       	pop	r26
    235e:	9f 91       	pop	r25
    2360:	8f 91       	pop	r24
    2362:	7f 91       	pop	r23
    2364:	6f 91       	pop	r22
    2366:	5f 91       	pop	r21
    2368:	4f 91       	pop	r20
    236a:	3f 91       	pop	r19
    236c:	2f 91       	pop	r18
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    2378:	1f 92       	push	r1
    237a:	0f 92       	push	r0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	2f 93       	push	r18
    2384:	3f 93       	push	r19
    2386:	4f 93       	push	r20
    2388:	5f 93       	push	r21
    238a:	6f 93       	push	r22
    238c:	7f 93       	push	r23
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBack_Ptr != NULL_PTR)
    23a2:	80 91 96 01 	lds	r24, 0x0196
    23a6:	90 91 97 01 	lds	r25, 0x0197
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	29 f0       	breq	.+10     	; 0x23b8 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the event is detected */
		(*g_timer0CallBack_Ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23ae:	e0 91 96 01 	lds	r30, 0x0196
    23b2:	f0 91 97 01 	lds	r31, 0x0197
    23b6:	09 95       	icall
	}
}
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	ff 91       	pop	r31
    23be:	ef 91       	pop	r30
    23c0:	bf 91       	pop	r27
    23c2:	af 91       	pop	r26
    23c4:	9f 91       	pop	r25
    23c6:	8f 91       	pop	r24
    23c8:	7f 91       	pop	r23
    23ca:	6f 91       	pop	r22
    23cc:	5f 91       	pop	r21
    23ce:	4f 91       	pop	r20
    23d0:	3f 91       	pop	r19
    23d2:	2f 91       	pop	r18
    23d4:	0f 90       	pop	r0
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	0f 90       	pop	r0
    23da:	1f 90       	pop	r1
    23dc:	18 95       	reti

000023de <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    23de:	1f 92       	push	r1
    23e0:	0f 92       	push	r0
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	0f 92       	push	r0
    23e6:	11 24       	eor	r1, r1
    23e8:	2f 93       	push	r18
    23ea:	3f 93       	push	r19
    23ec:	4f 93       	push	r20
    23ee:	5f 93       	push	r21
    23f0:	6f 93       	push	r22
    23f2:	7f 93       	push	r23
    23f4:	8f 93       	push	r24
    23f6:	9f 93       	push	r25
    23f8:	af 93       	push	r26
    23fa:	bf 93       	push	r27
    23fc:	ef 93       	push	r30
    23fe:	ff 93       	push	r31
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBack_Ptr != NULL_PTR)
    2408:	80 91 9a 01 	lds	r24, 0x019A
    240c:	90 91 9b 01 	lds	r25, 0x019B
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	29 f0       	breq	.+10     	; 0x241e <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the event is detected */
		(*g_timer2CallBack_Ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2414:	e0 91 9a 01 	lds	r30, 0x019A
    2418:	f0 91 9b 01 	lds	r31, 0x019B
    241c:	09 95       	icall
	}
}
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	ff 91       	pop	r31
    2424:	ef 91       	pop	r30
    2426:	bf 91       	pop	r27
    2428:	af 91       	pop	r26
    242a:	9f 91       	pop	r25
    242c:	8f 91       	pop	r24
    242e:	7f 91       	pop	r23
    2430:	6f 91       	pop	r22
    2432:	5f 91       	pop	r21
    2434:	4f 91       	pop	r20
    2436:	3f 91       	pop	r19
    2438:	2f 91       	pop	r18
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	0f 90       	pop	r0
    2440:	1f 90       	pop	r1
    2442:	18 95       	reti

00002444 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2444:	1f 92       	push	r1
    2446:	0f 92       	push	r0
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	0f 92       	push	r0
    244c:	11 24       	eor	r1, r1
    244e:	2f 93       	push	r18
    2450:	3f 93       	push	r19
    2452:	4f 93       	push	r20
    2454:	5f 93       	push	r21
    2456:	6f 93       	push	r22
    2458:	7f 93       	push	r23
    245a:	8f 93       	push	r24
    245c:	9f 93       	push	r25
    245e:	af 93       	push	r26
    2460:	bf 93       	push	r27
    2462:	ef 93       	push	r30
    2464:	ff 93       	push	r31
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBack_Ptr != NULL_PTR)
    246e:	80 91 9a 01 	lds	r24, 0x019A
    2472:	90 91 9b 01 	lds	r25, 0x019B
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	29 f0       	breq	.+10     	; 0x2484 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the event is detected */
		(*g_timer2CallBack_Ptr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    247a:	e0 91 9a 01 	lds	r30, 0x019A
    247e:	f0 91 9b 01 	lds	r31, 0x019B
    2482:	09 95       	icall
	}
}
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	ff 91       	pop	r31
    248a:	ef 91       	pop	r30
    248c:	bf 91       	pop	r27
    248e:	af 91       	pop	r26
    2490:	9f 91       	pop	r25
    2492:	8f 91       	pop	r24
    2494:	7f 91       	pop	r23
    2496:	6f 91       	pop	r22
    2498:	5f 91       	pop	r21
    249a:	4f 91       	pop	r20
    249c:	3f 91       	pop	r19
    249e:	2f 91       	pop	r18
    24a0:	0f 90       	pop	r0
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	0f 90       	pop	r0
    24a6:	1f 90       	pop	r1
    24a8:	18 95       	reti

000024aa <TIMER_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TIMER_init(TIMER_ConfigType * Config_Ptr)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <TIMER_init+0x6>
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	9a 83       	std	Y+2, r25	; 0x02
    24b6:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->timer == TIMER_0)
    24b8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ba:	fa 81       	ldd	r31, Y+2	; 0x02
    24bc:	80 81       	ld	r24, Z
    24be:	88 23       	and	r24, r24
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <TIMER_init+0x1a>
    24c2:	4a c0       	rjmp	.+148    	; 0x2558 <TIMER_init+0xae>
	{
		/* TCCR0 Register Bits Description :
		 * Non PWM Mode : FOC0=1
		 * No OC0 ,no compare output : COM00=0 & COM01=0
		 */
		TCCR0 |= (1<<FOC0);
    24c4:	a3 e5       	ldi	r26, 0x53	; 83
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e3 e5       	ldi	r30, 0x53	; 83
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	80 68       	ori	r24, 0x80	; 128
    24d0:	8c 93       	st	X, r24
		/* Insert the needed timer mood in the right bits
		 * ( WGM00 , WGM01 ) in TCCR0 register
		 */
		TCCR0 = (TCCR0 & 0xF7) | ((Config_Ptr->mode)<<3);
    24d2:	a3 e5       	ldi	r26, 0x53	; 83
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e3 e5       	ldi	r30, 0x53	; 83
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	28 2f       	mov	r18, r24
    24de:	27 7f       	andi	r18, 0xF7	; 247
    24e0:	e9 81       	ldd	r30, Y+1	; 0x01
    24e2:	fa 81       	ldd	r31, Y+2	; 0x02
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	82 2b       	or	r24, r18
    24f8:	8c 93       	st	X, r24

		/* Insert the required timer frequency prescaler in the first three bits
		 * in TCCR0 register ( CS00 , CS01 , CS02 )
		 */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    24fa:	a3 e5       	ldi	r26, 0x53	; 83
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e3 e5       	ldi	r30, 0x53	; 83
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	98 2f       	mov	r25, r24
    2506:	98 7f       	andi	r25, 0xF8	; 248
    2508:	e9 81       	ldd	r30, Y+1	; 0x01
    250a:	fa 81       	ldd	r31, Y+2	; 0x02
    250c:	83 81       	ldd	r24, Z+3	; 0x03
    250e:	89 2b       	or	r24, r25
    2510:	8c 93       	st	X, r24
		/* TIMSK Register Bits Description :
		 * insert the required interrupt mode in the rights bit in TIMSK register
		 * (TOIE0) for interrupt overflow enable
		 * (OCIE0) for interrupt compare match enable
		 */
		TIMSK |= (1<<(Config_Ptr->mode));
    2512:	a9 e5       	ldi	r26, 0x59	; 89
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e9 e5       	ldi	r30, 0x59	; 89
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	48 2f       	mov	r20, r24
    251e:	e9 81       	ldd	r30, Y+1	; 0x01
    2520:	fa 81       	ldd	r31, Y+2	; 0x02
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	02 2e       	mov	r0, r18
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <TIMER_init+0x8a>
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	0a 94       	dec	r0
    2536:	e2 f7       	brpl	.-8      	; 0x2530 <TIMER_init+0x86>
    2538:	84 2b       	or	r24, r20
    253a:	8c 93       	st	X, r24

		TCNT0 = (Config_Ptr->initialValue);  /* Insert the required initial value in TCNT0 register */
    253c:	a2 e5       	ldi	r26, 0x52	; 82
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e9 81       	ldd	r30, Y+1	; 0x01
    2542:	fa 81       	ldd	r31, Y+2	; 0x02
    2544:	84 81       	ldd	r24, Z+4	; 0x04
    2546:	8c 93       	st	X, r24
		OCR0 = (Config_Ptr->compareValue);   /*Insert the required compare value in OCR0 register */
    2548:	ac e5       	ldi	r26, 0x5C	; 92
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e9 81       	ldd	r30, Y+1	; 0x01
    254e:	fa 81       	ldd	r31, Y+2	; 0x02
    2550:	85 81       	ldd	r24, Z+5	; 0x05
    2552:	96 81       	ldd	r25, Z+6	; 0x06
    2554:	8c 93       	st	X, r24
    2556:	fd c0       	rjmp	.+506    	; 0x2752 <TIMER_init+0x2a8>
	}
	else if (Config_Ptr->timer == TIMER_1)
    2558:	e9 81       	ldd	r30, Y+1	; 0x01
    255a:	fa 81       	ldd	r31, Y+2	; 0x02
    255c:	80 81       	ld	r24, Z
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	09 f0       	breq	.+2      	; 0x2564 <TIMER_init+0xba>
    2562:	a4 c0       	rjmp	.+328    	; 0x26ac <TIMER_init+0x202>
	{
		if (Config_Ptr->channel == CHANNEL_A)
    2564:	e9 81       	ldd	r30, Y+1	; 0x01
    2566:	fa 81       	ldd	r31, Y+2	; 0x02
    2568:	81 81       	ldd	r24, Z+1	; 0x01
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	09 f0       	breq	.+2      	; 0x2570 <TIMER_init+0xc6>
    256e:	4c c0       	rjmp	.+152    	; 0x2608 <TIMER_init+0x15e>
			/* TCCR1A Register Bits Description :
			 *
			 * Non PWM Mode : FOC1A=1 , FOC1B=1
			 * Disconnect (OCA1,OCB1) ,no compare output : COM1A0/COM1B0=0 & COM1A1/COM1B1=0
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2570:	ef e4       	ldi	r30, 0x4F	; 79
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	8c e0       	ldi	r24, 0x0C	; 12
    2576:	80 83       	st	Z, r24

			/* Insert the required timer frequency prescaler in the first three bits
			 * in TCCR1B register ( CS10 , CS11 , CS12 )
			 */
			TCCR1B = Config_Ptr->prescaler;
    2578:	ae e4       	ldi	r26, 0x4E	; 78
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	83 81       	ldd	r24, Z+3	; 0x03
    2582:	8c 93       	st	X, r24

			/* Insert the required timer mood (wave generation mood) in the right bits
			 * ( WGM12 ) in TCCR1B register
			 */
			TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->mode)<<WGM12);
    2584:	ae e4       	ldi	r26, 0x4E	; 78
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	ee e4       	ldi	r30, 0x4E	; 78
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	28 2f       	mov	r18, r24
    2590:	27 7f       	andi	r18, 0xF7	; 247
    2592:	e9 81       	ldd	r30, Y+1	; 0x01
    2594:	fa 81       	ldd	r31, Y+2	; 0x02
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	82 2b       	or	r24, r18
    25aa:	8c 93       	st	X, r24

			TCNT1 = Config_Ptr->initialValue;  /* Insert the required initial value in TCNT1 register */
    25ac:	ac e4       	ldi	r26, 0x4C	; 76
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e9 81       	ldd	r30, Y+1	; 0x01
    25b2:	fa 81       	ldd	r31, Y+2	; 0x02
    25b4:	84 81       	ldd	r24, Z+4	; 0x04
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	11 96       	adiw	r26, 0x01	; 1
    25bc:	9c 93       	st	X, r25
    25be:	8e 93       	st	-X, r24
			OCR1A = Config_Ptr->compareValue;   /*Insert the required compare value in OCR1A register */
    25c0:	aa e4       	ldi	r26, 0x4A	; 74
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e9 81       	ldd	r30, Y+1	; 0x01
    25c6:	fa 81       	ldd	r31, Y+2	; 0x02
    25c8:	85 81       	ldd	r24, Z+5	; 0x05
    25ca:	96 81       	ldd	r25, Z+6	; 0x06
    25cc:	11 96       	adiw	r26, 0x01	; 1
    25ce:	9c 93       	st	X, r25
    25d0:	8e 93       	st	-X, r24
			 *
			 * insert the required interrupt mode in the rights bit in TIMSK register
			 * (TOIE1) for interrupt overflow enable
			 * (OCIE1A) for interrupt compare match enable channel A
			 */
			if ( Config_Ptr->mode == COMPARE )
    25d2:	e9 81       	ldd	r30, Y+1	; 0x01
    25d4:	fa 81       	ldd	r31, Y+2	; 0x02
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	41 f4       	brne	.+16     	; 0x25ec <TIMER_init+0x142>
				TIMSK |= (1<<OCIE1A);
    25dc:	a9 e5       	ldi	r26, 0x59	; 89
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e9 e5       	ldi	r30, 0x59	; 89
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	80 61       	ori	r24, 0x10	; 16
    25e8:	8c 93       	st	X, r24
    25ea:	b3 c0       	rjmp	.+358    	; 0x2752 <TIMER_init+0x2a8>
			else if ( Config_Ptr->mode == OVERFLOW )
    25ec:	e9 81       	ldd	r30, Y+1	; 0x01
    25ee:	fa 81       	ldd	r31, Y+2	; 0x02
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	88 23       	and	r24, r24
    25f4:	09 f0       	breq	.+2      	; 0x25f8 <TIMER_init+0x14e>
    25f6:	ad c0       	rjmp	.+346    	; 0x2752 <TIMER_init+0x2a8>
				TIMSK |= (1<<TOIE1);
    25f8:	a9 e5       	ldi	r26, 0x59	; 89
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e9 e5       	ldi	r30, 0x59	; 89
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	84 60       	ori	r24, 0x04	; 4
    2604:	8c 93       	st	X, r24
    2606:	a5 c0       	rjmp	.+330    	; 0x2752 <TIMER_init+0x2a8>
		}
		else if (Config_Ptr->channel == CHANNEL_B)
    2608:	e9 81       	ldd	r30, Y+1	; 0x01
    260a:	fa 81       	ldd	r31, Y+2	; 0x02
    260c:	81 81       	ldd	r24, Z+1	; 0x01
    260e:	82 30       	cpi	r24, 0x02	; 2
    2610:	09 f0       	breq	.+2      	; 0x2614 <TIMER_init+0x16a>
    2612:	9f c0       	rjmp	.+318    	; 0x2752 <TIMER_init+0x2a8>
			/* TCCR1A Register Bits Description :
			 *
			 * Non PWM Mode : FOC1A=1 , FOC1B=1
			 * Disconnect (OCA1,OCB1) ,no compare output : COM1A0/COM1B0=0 & COM1A1/COM1B1=0
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2614:	ef e4       	ldi	r30, 0x4F	; 79
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	8c e0       	ldi	r24, 0x0C	; 12
    261a:	80 83       	st	Z, r24

			/* Insert the required timer frequency prescaler in the first three bits
			 * in TCCR1B register ( CS10 , CS11 , CS12 )
			 */
			TCCR1B = Config_Ptr->prescaler;
    261c:	ae e4       	ldi	r26, 0x4E	; 78
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e9 81       	ldd	r30, Y+1	; 0x01
    2622:	fa 81       	ldd	r31, Y+2	; 0x02
    2624:	83 81       	ldd	r24, Z+3	; 0x03
    2626:	8c 93       	st	X, r24

			/* Insert the required timer mood (wave generation mood) in the right bits
			 * ( WGM12 ) in TCCR1B register
			 */
			TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->mode)<<WGM12);
    2628:	ae e4       	ldi	r26, 0x4E	; 78
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ee e4       	ldi	r30, 0x4E	; 78
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	28 2f       	mov	r18, r24
    2634:	27 7f       	andi	r18, 0xF7	; 247
    2636:	e9 81       	ldd	r30, Y+1	; 0x01
    2638:	fa 81       	ldd	r31, Y+2	; 0x02
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	88 0f       	add	r24, r24
    264a:	99 1f       	adc	r25, r25
    264c:	82 2b       	or	r24, r18
    264e:	8c 93       	st	X, r24

			TCNT1 = Config_Ptr->initialValue;  /* Insert the required initial value  */
    2650:	ac e4       	ldi	r26, 0x4C	; 76
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e9 81       	ldd	r30, Y+1	; 0x01
    2656:	fa 81       	ldd	r31, Y+2	; 0x02
    2658:	84 81       	ldd	r24, Z+4	; 0x04
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	11 96       	adiw	r26, 0x01	; 1
    2660:	9c 93       	st	X, r25
    2662:	8e 93       	st	-X, r24
			OCR1B = Config_Ptr->compareValue;   /*Insert the required compare value  */
    2664:	a8 e4       	ldi	r26, 0x48	; 72
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e9 81       	ldd	r30, Y+1	; 0x01
    266a:	fa 81       	ldd	r31, Y+2	; 0x02
    266c:	85 81       	ldd	r24, Z+5	; 0x05
    266e:	96 81       	ldd	r25, Z+6	; 0x06
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	9c 93       	st	X, r25
    2674:	8e 93       	st	-X, r24
			 *
			 * insert the required interrupt mode in the rights bit in TIMSK register
			 * (TOIE1) for interrupt overflow enable
			 * (OCIE1A) for interrupt compare match enable channel A
			 */
			if ( Config_Ptr->mode == COMPARE )
    2676:	e9 81       	ldd	r30, Y+1	; 0x01
    2678:	fa 81       	ldd	r31, Y+2	; 0x02
    267a:	82 81       	ldd	r24, Z+2	; 0x02
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	41 f4       	brne	.+16     	; 0x2690 <TIMER_init+0x1e6>
				TIMSK |= (1<<OCIE1B);
    2680:	a9 e5       	ldi	r26, 0x59	; 89
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e9 e5       	ldi	r30, 0x59	; 89
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	88 60       	ori	r24, 0x08	; 8
    268c:	8c 93       	st	X, r24
    268e:	61 c0       	rjmp	.+194    	; 0x2752 <TIMER_init+0x2a8>
			else if ( Config_Ptr->mode == OVERFLOW )
    2690:	e9 81       	ldd	r30, Y+1	; 0x01
    2692:	fa 81       	ldd	r31, Y+2	; 0x02
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	88 23       	and	r24, r24
    2698:	09 f0       	breq	.+2      	; 0x269c <TIMER_init+0x1f2>
    269a:	5b c0       	rjmp	.+182    	; 0x2752 <TIMER_init+0x2a8>
				TIMSK |= (1<<TOIE1);
    269c:	a9 e5       	ldi	r26, 0x59	; 89
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e9 e5       	ldi	r30, 0x59	; 89
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	84 60       	ori	r24, 0x04	; 4
    26a8:	8c 93       	st	X, r24
    26aa:	53 c0       	rjmp	.+166    	; 0x2752 <TIMER_init+0x2a8>
		}
	}
	else if (Config_Ptr->timer == TIMER_2)
    26ac:	e9 81       	ldd	r30, Y+1	; 0x01
    26ae:	fa 81       	ldd	r31, Y+2	; 0x02
    26b0:	80 81       	ld	r24, Z
    26b2:	82 30       	cpi	r24, 0x02	; 2
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <TIMER_init+0x20e>
    26b6:	4d c0       	rjmp	.+154    	; 0x2752 <TIMER_init+0x2a8>
		/* TCCR0 Register Bits Description :
		 *
		 * Non PWM Mode : FOC2=1
		 * No OC0 ,no compare output : COM20=0 & COM21=0
		 */
		TCCR0 |= (1<<FOC2);
    26b8:	a3 e5       	ldi	r26, 0x53	; 83
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e3 e5       	ldi	r30, 0x53	; 83
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 68       	ori	r24, 0x80	; 128
    26c4:	8c 93       	st	X, r24

		/* Insert the required timer mood (wave generation mood) in the right bits
		 * ( WGM20 , WGM21 ) in TCCR2 register
		 */
		TCCR2= (TCCR2 & 0xF7) | ((Config_Ptr->mode)<<3);
    26c6:	a5 e4       	ldi	r26, 0x45	; 69
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e5 e4       	ldi	r30, 0x45	; 69
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	28 2f       	mov	r18, r24
    26d2:	27 7f       	andi	r18, 0xF7	; 247
    26d4:	e9 81       	ldd	r30, Y+1	; 0x01
    26d6:	fa 81       	ldd	r31, Y+2	; 0x02
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	88 0f       	add	r24, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	82 2b       	or	r24, r18
    26ec:	8c 93       	st	X, r24

		/* Insert the required timer frequency prescaler in the first three bits
		 * in TCCR2 register ( CS20 , CS21 , CS22 )
		 */
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->prescaler);
    26ee:	a5 e4       	ldi	r26, 0x45	; 69
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e5 e4       	ldi	r30, 0x45	; 69
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	98 2f       	mov	r25, r24
    26fa:	98 7f       	andi	r25, 0xF8	; 248
    26fc:	e9 81       	ldd	r30, Y+1	; 0x01
    26fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2700:	83 81       	ldd	r24, Z+3	; 0x03
    2702:	89 2b       	or	r24, r25
    2704:	8c 93       	st	X, r24
		 *
		 * insert the required interrupt mode in the rights bit in TIMSK register
		 * (TOIE2) for interrupt overflow enable
		 * (OCIE2) for interrupt compare match enable
		 */
		if ( Config_Ptr->mode == COMPARE )
    2706:	e9 81       	ldd	r30, Y+1	; 0x01
    2708:	fa 81       	ldd	r31, Y+2	; 0x02
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	41 f4       	brne	.+16     	; 0x2720 <TIMER_init+0x276>
			TIMSK |= (1<<OCIE2);
    2710:	a9 e5       	ldi	r26, 0x59	; 89
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e9 e5       	ldi	r30, 0x59	; 89
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 68       	ori	r24, 0x80	; 128
    271c:	8c 93       	st	X, r24
    271e:	0c c0       	rjmp	.+24     	; 0x2738 <TIMER_init+0x28e>
		else if ( Config_Ptr->mode == OVERFLOW )
    2720:	e9 81       	ldd	r30, Y+1	; 0x01
    2722:	fa 81       	ldd	r31, Y+2	; 0x02
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	88 23       	and	r24, r24
    2728:	39 f4       	brne	.+14     	; 0x2738 <TIMER_init+0x28e>
			TIMSK |= (1<<TOIE2);
    272a:	a9 e5       	ldi	r26, 0x59	; 89
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e9 e5       	ldi	r30, 0x59	; 89
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	80 64       	ori	r24, 0x40	; 64
    2736:	8c 93       	st	X, r24

		TCNT2 = (Config_Ptr->initialValue);  /* Insert the required initial value in TCNT2 register */
    2738:	a4 e4       	ldi	r26, 0x44	; 68
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e9 81       	ldd	r30, Y+1	; 0x01
    273e:	fa 81       	ldd	r31, Y+2	; 0x02
    2740:	84 81       	ldd	r24, Z+4	; 0x04
    2742:	8c 93       	st	X, r24
		OCR2 = (Config_Ptr->compareValue);   /*Insert the required compare value in OCR2 register */
    2744:	a3 e4       	ldi	r26, 0x43	; 67
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e9 81       	ldd	r30, Y+1	; 0x01
    274a:	fa 81       	ldd	r31, Y+2	; 0x02
    274c:	85 81       	ldd	r24, Z+5	; 0x05
    274e:	96 81       	ldd	r25, Z+6	; 0x06
    2750:	8c 93       	st	X, r24
	}
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <TIMER0_setCallBack>:


void TIMER0_setCallBack(void(*ptr)(void))
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <TIMER0_setCallBack+0x6>
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
	g_timer0CallBack_Ptr = ptr;
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	90 93 97 01 	sts	0x0197, r25
    2772:	80 93 96 01 	sts	0x0196, r24
}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*ptr)(void))
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	00 d0       	rcall	.+0      	; 0x2786 <TIMER1_setCallBack+0x6>
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	9a 83       	std	Y+2, r25	; 0x02
    278c:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBack_Ptr = ptr;
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	90 93 99 01 	sts	0x0199, r25
    2796:	80 93 98 01 	sts	0x0198, r24
}
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <TIMER2_setCallBack>:

void TIMER2_setCallBack(void(*ptr)(void))
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <TIMER2_setCallBack+0x6>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
	g_timer2CallBack_Ptr = ptr;
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	90 93 9b 01 	sts	0x019B, r25
    27ba:	80 93 9a 01 	sts	0x019A, r24
}
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <TIMER_DeInit>:


void TIMER_DeInit(void)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	TIMSK = 0;
    27d0:	e9 e5       	ldi	r30, 0x59	; 89
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	10 82       	st	Z, r1
}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <BUZZER_init>:
/////////////////////////////////////////////////////////
/* Description:
 * set the buzzer pin direction as output pin by gpio
 */
void BUZZER_init(void)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    27e4:	83 e0       	ldi	r24, 0x03	; 3
    27e6:	66 e0       	ldi	r22, 0x06	; 6
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 b3 14 	call	0x2966	; 0x2966 <GPIO_setupPinDirection>
}
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <BUZZER_on>:
////////////////////////////////////////////////////////
/* Description:
 * turn on the buzzer by writing logic one in the buzzer pin by gpio
 */
void BUZZER_on(void)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    27fc:	83 e0       	ldi	r24, 0x03	; 3
    27fe:	66 e0       	ldi	r22, 0x06	; 6
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
}
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <BUZZER_off>:
////////////////////////////////////////////////////////
/* Description:
 * turn off the buzzer by writing logic zero in the buzzer pin by gpio
 */
void BUZZER_off(void)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	66 e0       	ldi	r22, 0x06	; 6
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <GPIO_writePin>
}
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <EEPROM_writeByte+0x6>
    282a:	00 d0       	rcall	.+0      	; 0x282c <EEPROM_writeByte+0x8>
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	9a 83       	std	Y+2, r25	; 0x02
    2832:	89 83       	std	Y+1, r24	; 0x01
    2834:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2836:	0e 94 36 18 	call	0x306c	; 0x306c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    283a:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    283e:	88 30       	cpi	r24, 0x08	; 8
    2840:	11 f0       	breq	.+4      	; 0x2846 <EEPROM_writeByte+0x22>
        return ERROR;
    2842:	1c 82       	std	Y+4, r1	; 0x04
    2844:	28 c0       	rjmp	.+80     	; 0x2896 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	80 70       	andi	r24, 0x00	; 0
    284c:	97 70       	andi	r25, 0x07	; 7
    284e:	88 0f       	add	r24, r24
    2850:	89 2f       	mov	r24, r25
    2852:	88 1f       	adc	r24, r24
    2854:	99 0b       	sbc	r25, r25
    2856:	91 95       	neg	r25
    2858:	80 6a       	ori	r24, 0xA0	; 160
    285a:	0e 94 51 18 	call	0x30a2	; 0x30a2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    285e:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    2862:	88 31       	cpi	r24, 0x18	; 24
    2864:	11 f0       	breq	.+4      	; 0x286a <EEPROM_writeByte+0x46>
        return ERROR;
    2866:	1c 82       	std	Y+4, r1	; 0x04
    2868:	16 c0       	rjmp	.+44     	; 0x2896 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2870:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    2874:	88 32       	cpi	r24, 0x28	; 40
    2876:	11 f0       	breq	.+4      	; 0x287c <EEPROM_writeByte+0x58>
        return ERROR;
    2878:	1c 82       	std	Y+4, r1	; 0x04
    287a:	0d c0       	rjmp	.+26     	; 0x2896 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	0e 94 51 18 	call	0x30a2	; 0x30a2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2882:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    2886:	88 32       	cpi	r24, 0x28	; 40
    2888:	11 f0       	breq	.+4      	; 0x288e <EEPROM_writeByte+0x6a>
        return ERROR;
    288a:	1c 82       	std	Y+4, r1	; 0x04
    288c:	04 c0       	rjmp	.+8      	; 0x2896 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    288e:	0e 94 46 18 	call	0x308c	; 0x308c <TWI_stop>

    return SUCCESS;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	8c 83       	std	Y+4, r24	; 0x04
    2896:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <EEPROM_readByte+0x6>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <EEPROM_readByte+0x8>
    28ae:	0f 92       	push	r0
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	7c 83       	std	Y+4, r23	; 0x04
    28ba:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    28bc:	0e 94 36 18 	call	0x306c	; 0x306c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    28c0:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    28c4:	88 30       	cpi	r24, 0x08	; 8
    28c6:	11 f0       	breq	.+4      	; 0x28cc <EEPROM_readByte+0x26>
        return ERROR;
    28c8:	1d 82       	std	Y+5, r1	; 0x05
    28ca:	44 c0       	rjmp	.+136    	; 0x2954 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	80 70       	andi	r24, 0x00	; 0
    28d2:	97 70       	andi	r25, 0x07	; 7
    28d4:	88 0f       	add	r24, r24
    28d6:	89 2f       	mov	r24, r25
    28d8:	88 1f       	adc	r24, r24
    28da:	99 0b       	sbc	r25, r25
    28dc:	91 95       	neg	r25
    28de:	80 6a       	ori	r24, 0xA0	; 160
    28e0:	0e 94 51 18 	call	0x30a2	; 0x30a2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    28e4:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    28e8:	88 31       	cpi	r24, 0x18	; 24
    28ea:	11 f0       	breq	.+4      	; 0x28f0 <EEPROM_readByte+0x4a>
        return ERROR;
    28ec:	1d 82       	std	Y+5, r1	; 0x05
    28ee:	32 c0       	rjmp	.+100    	; 0x2954 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	0e 94 51 18 	call	0x30a2	; 0x30a2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    28f6:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    28fa:	88 32       	cpi	r24, 0x28	; 40
    28fc:	11 f0       	breq	.+4      	; 0x2902 <EEPROM_readByte+0x5c>
        return ERROR;
    28fe:	1d 82       	std	Y+5, r1	; 0x05
    2900:	29 c0       	rjmp	.+82     	; 0x2954 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    2902:	0e 94 36 18 	call	0x306c	; 0x306c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2906:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    290a:	80 31       	cpi	r24, 0x10	; 16
    290c:	11 f0       	breq	.+4      	; 0x2912 <EEPROM_readByte+0x6c>
        return ERROR;
    290e:	1d 82       	std	Y+5, r1	; 0x05
    2910:	21 c0       	rjmp	.+66     	; 0x2954 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	80 70       	andi	r24, 0x00	; 0
    2918:	97 70       	andi	r25, 0x07	; 7
    291a:	88 0f       	add	r24, r24
    291c:	89 2f       	mov	r24, r25
    291e:	88 1f       	adc	r24, r24
    2920:	99 0b       	sbc	r25, r25
    2922:	91 95       	neg	r25
    2924:	81 6a       	ori	r24, 0xA1	; 161
    2926:	0e 94 51 18 	call	0x30a2	; 0x30a2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    292a:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    292e:	80 34       	cpi	r24, 0x40	; 64
    2930:	11 f0       	breq	.+4      	; 0x2936 <EEPROM_readByte+0x90>
        return ERROR;
    2932:	1d 82       	std	Y+5, r1	; 0x05
    2934:	0f c0       	rjmp	.+30     	; 0x2954 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2936:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <TWI_readByteWithNACK>
    293a:	eb 81       	ldd	r30, Y+3	; 0x03
    293c:	fc 81       	ldd	r31, Y+4	; 0x04
    293e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2940:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_getStatus>
    2944:	88 35       	cpi	r24, 0x58	; 88
    2946:	11 f0       	breq	.+4      	; 0x294c <EEPROM_readByte+0xa6>
        return ERROR;
    2948:	1d 82       	std	Y+5, r1	; 0x05
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    294c:	0e 94 46 18 	call	0x308c	; 0x308c <TWI_stop>

    return SUCCESS;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	8d 83       	std	Y+5, r24	; 0x05
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	00 d0       	rcall	.+0      	; 0x296c <GPIO_setupPinDirection+0x6>
    296c:	00 d0       	rcall	.+0      	; 0x296e <GPIO_setupPinDirection+0x8>
    296e:	0f 92       	push	r0
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	6a 83       	std	Y+2, r22	; 0x02
    2978:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	88 30       	cpi	r24, 0x08	; 8
    297e:	08 f0       	brcs	.+2      	; 0x2982 <GPIO_setupPinDirection+0x1c>
    2980:	d5 c0       	rjmp	.+426    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	84 30       	cpi	r24, 0x04	; 4
    2986:	08 f0       	brcs	.+2      	; 0x298a <GPIO_setupPinDirection+0x24>
    2988:	d1 c0       	rjmp	.+418    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	28 2f       	mov	r18, r24
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	3d 83       	std	Y+5, r19	; 0x05
    2992:	2c 83       	std	Y+4, r18	; 0x04
    2994:	8c 81       	ldd	r24, Y+4	; 0x04
    2996:	9d 81       	ldd	r25, Y+5	; 0x05
    2998:	81 30       	cpi	r24, 0x01	; 1
    299a:	91 05       	cpc	r25, r1
    299c:	09 f4       	brne	.+2      	; 0x29a0 <GPIO_setupPinDirection+0x3a>
    299e:	43 c0       	rjmp	.+134    	; 0x2a26 <GPIO_setupPinDirection+0xc0>
    29a0:	2c 81       	ldd	r18, Y+4	; 0x04
    29a2:	3d 81       	ldd	r19, Y+5	; 0x05
    29a4:	22 30       	cpi	r18, 0x02	; 2
    29a6:	31 05       	cpc	r19, r1
    29a8:	2c f4       	brge	.+10     	; 0x29b4 <GPIO_setupPinDirection+0x4e>
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	9d 81       	ldd	r25, Y+5	; 0x05
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	71 f0       	breq	.+28     	; 0x29ce <GPIO_setupPinDirection+0x68>
    29b2:	bc c0       	rjmp	.+376    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
    29b4:	2c 81       	ldd	r18, Y+4	; 0x04
    29b6:	3d 81       	ldd	r19, Y+5	; 0x05
    29b8:	22 30       	cpi	r18, 0x02	; 2
    29ba:	31 05       	cpc	r19, r1
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <GPIO_setupPinDirection+0x5a>
    29be:	5f c0       	rjmp	.+190    	; 0x2a7e <GPIO_setupPinDirection+0x118>
    29c0:	8c 81       	ldd	r24, Y+4	; 0x04
    29c2:	9d 81       	ldd	r25, Y+5	; 0x05
    29c4:	83 30       	cpi	r24, 0x03	; 3
    29c6:	91 05       	cpc	r25, r1
    29c8:	09 f4       	brne	.+2      	; 0x29cc <GPIO_setupPinDirection+0x66>
    29ca:	85 c0       	rjmp	.+266    	; 0x2ad6 <GPIO_setupPinDirection+0x170>
    29cc:	af c0       	rjmp	.+350    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	a1 f4       	brne	.+40     	; 0x29fc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    29d4:	aa e3       	ldi	r26, 0x3A	; 58
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	ea e3       	ldi	r30, 0x3A	; 58
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	48 2f       	mov	r20, r24
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	02 2e       	mov	r0, r18
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <GPIO_setupPinDirection+0x8c>
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	0a 94       	dec	r0
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <GPIO_setupPinDirection+0x88>
    29f6:	84 2b       	or	r24, r20
    29f8:	8c 93       	st	X, r24
    29fa:	98 c0       	rjmp	.+304    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    29fc:	aa e3       	ldi	r26, 0x3A	; 58
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	ea e3       	ldi	r30, 0x3A	; 58
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	48 2f       	mov	r20, r24
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	02 2e       	mov	r0, r18
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <GPIO_setupPinDirection+0xb4>
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	0a 94       	dec	r0
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <GPIO_setupPinDirection+0xb0>
    2a1e:	80 95       	com	r24
    2a20:	84 23       	and	r24, r20
    2a22:	8c 93       	st	X, r24
    2a24:	83 c0       	rjmp	.+262    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	81 30       	cpi	r24, 0x01	; 1
    2a2a:	a1 f4       	brne	.+40     	; 0x2a54 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2a2c:	a7 e3       	ldi	r26, 0x37	; 55
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e7 e3       	ldi	r30, 0x37	; 55
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	48 2f       	mov	r20, r24
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	02 2e       	mov	r0, r18
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <GPIO_setupPinDirection+0xe4>
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	0a 94       	dec	r0
    2a4c:	e2 f7       	brpl	.-8      	; 0x2a46 <GPIO_setupPinDirection+0xe0>
    2a4e:	84 2b       	or	r24, r20
    2a50:	8c 93       	st	X, r24
    2a52:	6c c0       	rjmp	.+216    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2a54:	a7 e3       	ldi	r26, 0x37	; 55
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e7 e3       	ldi	r30, 0x37	; 55
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	48 2f       	mov	r20, r24
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	02 2e       	mov	r0, r18
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <GPIO_setupPinDirection+0x10c>
    2a6e:	88 0f       	add	r24, r24
    2a70:	99 1f       	adc	r25, r25
    2a72:	0a 94       	dec	r0
    2a74:	e2 f7       	brpl	.-8      	; 0x2a6e <GPIO_setupPinDirection+0x108>
    2a76:	80 95       	com	r24
    2a78:	84 23       	and	r24, r20
    2a7a:	8c 93       	st	X, r24
    2a7c:	57 c0       	rjmp	.+174    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	a1 f4       	brne	.+40     	; 0x2aac <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2a84:	a4 e3       	ldi	r26, 0x34	; 52
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e4 e3       	ldi	r30, 0x34	; 52
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	48 2f       	mov	r20, r24
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <GPIO_setupPinDirection+0x13c>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	0a 94       	dec	r0
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <GPIO_setupPinDirection+0x138>
    2aa6:	84 2b       	or	r24, r20
    2aa8:	8c 93       	st	X, r24
    2aaa:	40 c0       	rjmp	.+128    	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2aac:	a4 e3       	ldi	r26, 0x34	; 52
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e4 e3       	ldi	r30, 0x34	; 52
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	48 2f       	mov	r20, r24
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	02 2e       	mov	r0, r18
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <GPIO_setupPinDirection+0x164>
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	0a 94       	dec	r0
    2acc:	e2 f7       	brpl	.-8      	; 0x2ac6 <GPIO_setupPinDirection+0x160>
    2ace:	80 95       	com	r24
    2ad0:	84 23       	and	r24, r20
    2ad2:	8c 93       	st	X, r24
    2ad4:	2b c0       	rjmp	.+86     	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	a1 f4       	brne	.+40     	; 0x2b04 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2adc:	a1 e3       	ldi	r26, 0x31	; 49
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e1 e3       	ldi	r30, 0x31	; 49
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	48 2f       	mov	r20, r24
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	02 2e       	mov	r0, r18
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <GPIO_setupPinDirection+0x194>
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	0a 94       	dec	r0
    2afc:	e2 f7       	brpl	.-8      	; 0x2af6 <GPIO_setupPinDirection+0x190>
    2afe:	84 2b       	or	r24, r20
    2b00:	8c 93       	st	X, r24
    2b02:	14 c0       	rjmp	.+40     	; 0x2b2c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2b04:	a1 e3       	ldi	r26, 0x31	; 49
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e1 e3       	ldi	r30, 0x31	; 49
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	48 2f       	mov	r20, r24
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	02 2e       	mov	r0, r18
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <GPIO_setupPinDirection+0x1bc>
    2b1e:	88 0f       	add	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	0a 94       	dec	r0
    2b24:	e2 f7       	brpl	.-8      	; 0x2b1e <GPIO_setupPinDirection+0x1b8>
    2b26:	80 95       	com	r24
    2b28:	84 23       	and	r24, r20
    2b2a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <GPIO_writePin+0x6>
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <GPIO_writePin+0x8>
    2b44:	0f 92       	push	r0
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	6a 83       	std	Y+2, r22	; 0x02
    2b4e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	88 30       	cpi	r24, 0x08	; 8
    2b54:	08 f0       	brcs	.+2      	; 0x2b58 <GPIO_writePin+0x1c>
    2b56:	d5 c0       	rjmp	.+426    	; 0x2d02 <GPIO_writePin+0x1c6>
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	84 30       	cpi	r24, 0x04	; 4
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <GPIO_writePin+0x24>
    2b5e:	d1 c0       	rjmp	.+418    	; 0x2d02 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	3d 83       	std	Y+5, r19	; 0x05
    2b68:	2c 83       	std	Y+4, r18	; 0x04
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6e:	81 30       	cpi	r24, 0x01	; 1
    2b70:	91 05       	cpc	r25, r1
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <GPIO_writePin+0x3a>
    2b74:	43 c0       	rjmp	.+134    	; 0x2bfc <GPIO_writePin+0xc0>
    2b76:	2c 81       	ldd	r18, Y+4	; 0x04
    2b78:	3d 81       	ldd	r19, Y+5	; 0x05
    2b7a:	22 30       	cpi	r18, 0x02	; 2
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	2c f4       	brge	.+10     	; 0x2b8a <GPIO_writePin+0x4e>
    2b80:	8c 81       	ldd	r24, Y+4	; 0x04
    2b82:	9d 81       	ldd	r25, Y+5	; 0x05
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	71 f0       	breq	.+28     	; 0x2ba4 <GPIO_writePin+0x68>
    2b88:	bc c0       	rjmp	.+376    	; 0x2d02 <GPIO_writePin+0x1c6>
    2b8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b8e:	22 30       	cpi	r18, 0x02	; 2
    2b90:	31 05       	cpc	r19, r1
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <GPIO_writePin+0x5a>
    2b94:	5f c0       	rjmp	.+190    	; 0x2c54 <GPIO_writePin+0x118>
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9a:	83 30       	cpi	r24, 0x03	; 3
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <GPIO_writePin+0x66>
    2ba0:	85 c0       	rjmp	.+266    	; 0x2cac <GPIO_writePin+0x170>
    2ba2:	af c0       	rjmp	.+350    	; 0x2d02 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	81 30       	cpi	r24, 0x01	; 1
    2ba8:	a1 f4       	brne	.+40     	; 0x2bd2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2baa:	ab e3       	ldi	r26, 0x3B	; 59
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	eb e3       	ldi	r30, 0x3B	; 59
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	48 2f       	mov	r20, r24
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	02 2e       	mov	r0, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <GPIO_writePin+0x8c>
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	0a 94       	dec	r0
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <GPIO_writePin+0x88>
    2bcc:	84 2b       	or	r24, r20
    2bce:	8c 93       	st	X, r24
    2bd0:	98 c0       	rjmp	.+304    	; 0x2d02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2bd2:	ab e3       	ldi	r26, 0x3B	; 59
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	eb e3       	ldi	r30, 0x3B	; 59
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	48 2f       	mov	r20, r24
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	02 2e       	mov	r0, r18
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <GPIO_writePin+0xb4>
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	0a 94       	dec	r0
    2bf2:	e2 f7       	brpl	.-8      	; 0x2bec <GPIO_writePin+0xb0>
    2bf4:	80 95       	com	r24
    2bf6:	84 23       	and	r24, r20
    2bf8:	8c 93       	st	X, r24
    2bfa:	83 c0       	rjmp	.+262    	; 0x2d02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	81 30       	cpi	r24, 0x01	; 1
    2c00:	a1 f4       	brne	.+40     	; 0x2c2a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2c02:	a8 e3       	ldi	r26, 0x38	; 56
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e8 e3       	ldi	r30, 0x38	; 56
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	48 2f       	mov	r20, r24
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	02 2e       	mov	r0, r18
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <GPIO_writePin+0xe4>
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	0a 94       	dec	r0
    2c22:	e2 f7       	brpl	.-8      	; 0x2c1c <GPIO_writePin+0xe0>
    2c24:	84 2b       	or	r24, r20
    2c26:	8c 93       	st	X, r24
    2c28:	6c c0       	rjmp	.+216    	; 0x2d02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2c2a:	a8 e3       	ldi	r26, 0x38	; 56
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e8 e3       	ldi	r30, 0x38	; 56
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	48 2f       	mov	r20, r24
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	02 2e       	mov	r0, r18
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <GPIO_writePin+0x10c>
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	0a 94       	dec	r0
    2c4a:	e2 f7       	brpl	.-8      	; 0x2c44 <GPIO_writePin+0x108>
    2c4c:	80 95       	com	r24
    2c4e:	84 23       	and	r24, r20
    2c50:	8c 93       	st	X, r24
    2c52:	57 c0       	rjmp	.+174    	; 0x2d02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	81 30       	cpi	r24, 0x01	; 1
    2c58:	a1 f4       	brne	.+40     	; 0x2c82 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2c5a:	a5 e3       	ldi	r26, 0x35	; 53
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e5 e3       	ldi	r30, 0x35	; 53
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	48 2f       	mov	r20, r24
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	02 2e       	mov	r0, r18
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <GPIO_writePin+0x13c>
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	0a 94       	dec	r0
    2c7a:	e2 f7       	brpl	.-8      	; 0x2c74 <GPIO_writePin+0x138>
    2c7c:	84 2b       	or	r24, r20
    2c7e:	8c 93       	st	X, r24
    2c80:	40 c0       	rjmp	.+128    	; 0x2d02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2c82:	a5 e3       	ldi	r26, 0x35	; 53
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e5 e3       	ldi	r30, 0x35	; 53
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	48 2f       	mov	r20, r24
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	02 2e       	mov	r0, r18
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <GPIO_writePin+0x164>
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	0a 94       	dec	r0
    2ca2:	e2 f7       	brpl	.-8      	; 0x2c9c <GPIO_writePin+0x160>
    2ca4:	80 95       	com	r24
    2ca6:	84 23       	and	r24, r20
    2ca8:	8c 93       	st	X, r24
    2caa:	2b c0       	rjmp	.+86     	; 0x2d02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	81 30       	cpi	r24, 0x01	; 1
    2cb0:	a1 f4       	brne	.+40     	; 0x2cda <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2cb2:	a2 e3       	ldi	r26, 0x32	; 50
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e2 e3       	ldi	r30, 0x32	; 50
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	48 2f       	mov	r20, r24
    2cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	02 2e       	mov	r0, r18
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <GPIO_writePin+0x194>
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	0a 94       	dec	r0
    2cd2:	e2 f7       	brpl	.-8      	; 0x2ccc <GPIO_writePin+0x190>
    2cd4:	84 2b       	or	r24, r20
    2cd6:	8c 93       	st	X, r24
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2cda:	a2 e3       	ldi	r26, 0x32	; 50
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e2 e3       	ldi	r30, 0x32	; 50
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	48 2f       	mov	r20, r24
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	28 2f       	mov	r18, r24
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	02 2e       	mov	r0, r18
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <GPIO_writePin+0x1bc>
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	0a 94       	dec	r0
    2cfa:	e2 f7       	brpl	.-8      	; 0x2cf4 <GPIO_writePin+0x1b8>
    2cfc:	80 95       	com	r24
    2cfe:	84 23       	and	r24, r20
    2d00:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <GPIO_readPin+0x6>
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <GPIO_readPin+0x8>
    2d1a:	0f 92       	push	r0
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	8a 83       	std	Y+2, r24	; 0x02
    2d22:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2d24:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2d26:	8b 81       	ldd	r24, Y+3	; 0x03
    2d28:	88 30       	cpi	r24, 0x08	; 8
    2d2a:	08 f0       	brcs	.+2      	; 0x2d2e <GPIO_readPin+0x1c>
    2d2c:	84 c0       	rjmp	.+264    	; 0x2e36 <GPIO_readPin+0x124>
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	84 30       	cpi	r24, 0x04	; 4
    2d32:	08 f0       	brcs	.+2      	; 0x2d36 <GPIO_readPin+0x24>
    2d34:	80 c0       	rjmp	.+256    	; 0x2e36 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	3d 83       	std	Y+5, r19	; 0x05
    2d3e:	2c 83       	std	Y+4, r18	; 0x04
    2d40:	4c 81       	ldd	r20, Y+4	; 0x04
    2d42:	5d 81       	ldd	r21, Y+5	; 0x05
    2d44:	41 30       	cpi	r20, 0x01	; 1
    2d46:	51 05       	cpc	r21, r1
    2d48:	79 f1       	breq	.+94     	; 0x2da8 <GPIO_readPin+0x96>
    2d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4e:	82 30       	cpi	r24, 0x02	; 2
    2d50:	91 05       	cpc	r25, r1
    2d52:	34 f4       	brge	.+12     	; 0x2d60 <GPIO_readPin+0x4e>
    2d54:	2c 81       	ldd	r18, Y+4	; 0x04
    2d56:	3d 81       	ldd	r19, Y+5	; 0x05
    2d58:	21 15       	cp	r18, r1
    2d5a:	31 05       	cpc	r19, r1
    2d5c:	69 f0       	breq	.+26     	; 0x2d78 <GPIO_readPin+0x66>
    2d5e:	6b c0       	rjmp	.+214    	; 0x2e36 <GPIO_readPin+0x124>
    2d60:	4c 81       	ldd	r20, Y+4	; 0x04
    2d62:	5d 81       	ldd	r21, Y+5	; 0x05
    2d64:	42 30       	cpi	r20, 0x02	; 2
    2d66:	51 05       	cpc	r21, r1
    2d68:	b9 f1       	breq	.+110    	; 0x2dd8 <GPIO_readPin+0xc6>
    2d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6e:	83 30       	cpi	r24, 0x03	; 3
    2d70:	91 05       	cpc	r25, r1
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <GPIO_readPin+0x64>
    2d74:	49 c0       	rjmp	.+146    	; 0x2e08 <GPIO_readPin+0xf6>
    2d76:	5f c0       	rjmp	.+190    	; 0x2e36 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2d78:	e9 e3       	ldi	r30, 0x39	; 57
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	28 2f       	mov	r18, r24
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	88 2f       	mov	r24, r24
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a9 01       	movw	r20, r18
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <GPIO_readPin+0x7e>
    2d8c:	55 95       	asr	r21
    2d8e:	47 95       	ror	r20
    2d90:	8a 95       	dec	r24
    2d92:	e2 f7       	brpl	.-8      	; 0x2d8c <GPIO_readPin+0x7a>
    2d94:	ca 01       	movw	r24, r20
    2d96:	81 70       	andi	r24, 0x01	; 1
    2d98:	90 70       	andi	r25, 0x00	; 0
    2d9a:	88 23       	and	r24, r24
    2d9c:	19 f0       	breq	.+6      	; 0x2da4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	89 83       	std	Y+1, r24	; 0x01
    2da2:	49 c0       	rjmp	.+146    	; 0x2e36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2da4:	19 82       	std	Y+1, r1	; 0x01
    2da6:	47 c0       	rjmp	.+142    	; 0x2e36 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2da8:	e6 e3       	ldi	r30, 0x36	; 54
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	88 2f       	mov	r24, r24
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	a9 01       	movw	r20, r18
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <GPIO_readPin+0xae>
    2dbc:	55 95       	asr	r21
    2dbe:	47 95       	ror	r20
    2dc0:	8a 95       	dec	r24
    2dc2:	e2 f7       	brpl	.-8      	; 0x2dbc <GPIO_readPin+0xaa>
    2dc4:	ca 01       	movw	r24, r20
    2dc6:	81 70       	andi	r24, 0x01	; 1
    2dc8:	90 70       	andi	r25, 0x00	; 0
    2dca:	88 23       	and	r24, r24
    2dcc:	19 f0       	breq	.+6      	; 0x2dd4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	31 c0       	rjmp	.+98     	; 0x2e36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2dd4:	19 82       	std	Y+1, r1	; 0x01
    2dd6:	2f c0       	rjmp	.+94     	; 0x2e36 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2dd8:	e3 e3       	ldi	r30, 0x33	; 51
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	a9 01       	movw	r20, r18
    2dea:	02 c0       	rjmp	.+4      	; 0x2df0 <GPIO_readPin+0xde>
    2dec:	55 95       	asr	r21
    2dee:	47 95       	ror	r20
    2df0:	8a 95       	dec	r24
    2df2:	e2 f7       	brpl	.-8      	; 0x2dec <GPIO_readPin+0xda>
    2df4:	ca 01       	movw	r24, r20
    2df6:	81 70       	andi	r24, 0x01	; 1
    2df8:	90 70       	andi	r25, 0x00	; 0
    2dfa:	88 23       	and	r24, r24
    2dfc:	19 f0       	breq	.+6      	; 0x2e04 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	19 c0       	rjmp	.+50     	; 0x2e36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2e04:	19 82       	std	Y+1, r1	; 0x01
    2e06:	17 c0       	rjmp	.+46     	; 0x2e36 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2e08:	e0 e3       	ldi	r30, 0x30	; 48
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	a9 01       	movw	r20, r18
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <GPIO_readPin+0x10e>
    2e1c:	55 95       	asr	r21
    2e1e:	47 95       	ror	r20
    2e20:	8a 95       	dec	r24
    2e22:	e2 f7       	brpl	.-8      	; 0x2e1c <GPIO_readPin+0x10a>
    2e24:	ca 01       	movw	r24, r20
    2e26:	81 70       	andi	r24, 0x01	; 1
    2e28:	90 70       	andi	r25, 0x00	; 0
    2e2a:	88 23       	and	r24, r24
    2e2c:	19 f0       	breq	.+6      	; 0x2e34 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	89 83       	std	Y+1, r24	; 0x01
    2e32:	01 c0       	rjmp	.+2      	; 0x2e36 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2e34:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <GPIO_setupPortDirection+0x6>
    2e4e:	00 d0       	rcall	.+0      	; 0x2e50 <GPIO_setupPortDirection+0x8>
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	84 30       	cpi	r24, 0x04	; 4
    2e5c:	90 f5       	brcc	.+100    	; 0x2ec2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	28 2f       	mov	r18, r24
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	3c 83       	std	Y+4, r19	; 0x04
    2e66:	2b 83       	std	Y+3, r18	; 0x03
    2e68:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	91 05       	cpc	r25, r1
    2e70:	d1 f0       	breq	.+52     	; 0x2ea6 <GPIO_setupPortDirection+0x5e>
    2e72:	2b 81       	ldd	r18, Y+3	; 0x03
    2e74:	3c 81       	ldd	r19, Y+4	; 0x04
    2e76:	22 30       	cpi	r18, 0x02	; 2
    2e78:	31 05       	cpc	r19, r1
    2e7a:	2c f4       	brge	.+10     	; 0x2e86 <GPIO_setupPortDirection+0x3e>
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	61 f0       	breq	.+24     	; 0x2e9c <GPIO_setupPortDirection+0x54>
    2e84:	1e c0       	rjmp	.+60     	; 0x2ec2 <GPIO_setupPortDirection+0x7a>
    2e86:	2b 81       	ldd	r18, Y+3	; 0x03
    2e88:	3c 81       	ldd	r19, Y+4	; 0x04
    2e8a:	22 30       	cpi	r18, 0x02	; 2
    2e8c:	31 05       	cpc	r19, r1
    2e8e:	81 f0       	breq	.+32     	; 0x2eb0 <GPIO_setupPortDirection+0x68>
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	83 30       	cpi	r24, 0x03	; 3
    2e96:	91 05       	cpc	r25, r1
    2e98:	81 f0       	breq	.+32     	; 0x2eba <GPIO_setupPortDirection+0x72>
    2e9a:	13 c0       	rjmp	.+38     	; 0x2ec2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2e9c:	ea e3       	ldi	r30, 0x3A	; 58
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	80 83       	st	Z, r24
    2ea4:	0e c0       	rjmp	.+28     	; 0x2ec2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2ea6:	e7 e3       	ldi	r30, 0x37	; 55
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	80 83       	st	Z, r24
    2eae:	09 c0       	rjmp	.+18     	; 0x2ec2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2eb0:	e4 e3       	ldi	r30, 0x34	; 52
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	80 83       	st	Z, r24
    2eb8:	04 c0       	rjmp	.+8      	; 0x2ec2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2eba:	e1 e3       	ldi	r30, 0x31	; 49
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	80 83       	st	Z, r24
			break;
		}
	}
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	00 d0       	rcall	.+0      	; 0x2ed6 <GPIO_writePort+0x6>
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <GPIO_writePort+0x8>
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	89 83       	std	Y+1, r24	; 0x01
    2ede:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	84 30       	cpi	r24, 0x04	; 4
    2ee4:	90 f5       	brcc	.+100    	; 0x2f4a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	28 2f       	mov	r18, r24
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	3c 83       	std	Y+4, r19	; 0x04
    2eee:	2b 83       	std	Y+3, r18	; 0x03
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef4:	81 30       	cpi	r24, 0x01	; 1
    2ef6:	91 05       	cpc	r25, r1
    2ef8:	d1 f0       	breq	.+52     	; 0x2f2e <GPIO_writePort+0x5e>
    2efa:	2b 81       	ldd	r18, Y+3	; 0x03
    2efc:	3c 81       	ldd	r19, Y+4	; 0x04
    2efe:	22 30       	cpi	r18, 0x02	; 2
    2f00:	31 05       	cpc	r19, r1
    2f02:	2c f4       	brge	.+10     	; 0x2f0e <GPIO_writePort+0x3e>
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	9c 81       	ldd	r25, Y+4	; 0x04
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	61 f0       	breq	.+24     	; 0x2f24 <GPIO_writePort+0x54>
    2f0c:	1e c0       	rjmp	.+60     	; 0x2f4a <GPIO_writePort+0x7a>
    2f0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f10:	3c 81       	ldd	r19, Y+4	; 0x04
    2f12:	22 30       	cpi	r18, 0x02	; 2
    2f14:	31 05       	cpc	r19, r1
    2f16:	81 f0       	breq	.+32     	; 0x2f38 <GPIO_writePort+0x68>
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	83 30       	cpi	r24, 0x03	; 3
    2f1e:	91 05       	cpc	r25, r1
    2f20:	81 f0       	breq	.+32     	; 0x2f42 <GPIO_writePort+0x72>
    2f22:	13 c0       	rjmp	.+38     	; 0x2f4a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2f24:	eb e3       	ldi	r30, 0x3B	; 59
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	80 83       	st	Z, r24
    2f2c:	0e c0       	rjmp	.+28     	; 0x2f4a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2f2e:	e8 e3       	ldi	r30, 0x38	; 56
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	80 83       	st	Z, r24
    2f36:	09 c0       	rjmp	.+18     	; 0x2f4a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2f38:	e5 e3       	ldi	r30, 0x35	; 53
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	80 83       	st	Z, r24
    2f40:	04 c0       	rjmp	.+8      	; 0x2f4a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2f42:	e2 e3       	ldi	r30, 0x32	; 50
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	80 83       	st	Z, r24
			break;
		}
	}
}
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	08 95       	ret

00002f58 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	00 d0       	rcall	.+0      	; 0x2f5e <GPIO_readPort+0x6>
    2f5e:	00 d0       	rcall	.+0      	; 0x2f60 <GPIO_readPort+0x8>
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2f66:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	84 30       	cpi	r24, 0x04	; 4
    2f6c:	90 f5       	brcc	.+100    	; 0x2fd2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	3c 83       	std	Y+4, r19	; 0x04
    2f76:	2b 83       	std	Y+3, r18	; 0x03
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	91 05       	cpc	r25, r1
    2f80:	d1 f0       	breq	.+52     	; 0x2fb6 <GPIO_readPort+0x5e>
    2f82:	2b 81       	ldd	r18, Y+3	; 0x03
    2f84:	3c 81       	ldd	r19, Y+4	; 0x04
    2f86:	22 30       	cpi	r18, 0x02	; 2
    2f88:	31 05       	cpc	r19, r1
    2f8a:	2c f4       	brge	.+10     	; 0x2f96 <GPIO_readPort+0x3e>
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	61 f0       	breq	.+24     	; 0x2fac <GPIO_readPort+0x54>
    2f94:	1e c0       	rjmp	.+60     	; 0x2fd2 <GPIO_readPort+0x7a>
    2f96:	2b 81       	ldd	r18, Y+3	; 0x03
    2f98:	3c 81       	ldd	r19, Y+4	; 0x04
    2f9a:	22 30       	cpi	r18, 0x02	; 2
    2f9c:	31 05       	cpc	r19, r1
    2f9e:	81 f0       	breq	.+32     	; 0x2fc0 <GPIO_readPort+0x68>
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa4:	83 30       	cpi	r24, 0x03	; 3
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	81 f0       	breq	.+32     	; 0x2fca <GPIO_readPort+0x72>
    2faa:	13 c0       	rjmp	.+38     	; 0x2fd2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2fac:	e9 e3       	ldi	r30, 0x39	; 57
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	0e c0       	rjmp	.+28     	; 0x2fd2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2fb6:	e6 e3       	ldi	r30, 0x36	; 54
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	09 c0       	rjmp	.+18     	; 0x2fd2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2fc0:	e3 e3       	ldi	r30, 0x33	; 51
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	04 c0       	rjmp	.+8      	; 0x2fd2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2fca:	e0 e3       	ldi	r30, 0x30	; 48
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <TWI_init+0xa>
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: Using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (uint8)(F_CPU/((float32)2UL*(Config_Ptr->bit_rate)))-8;
    2ff4:	00 e2       	ldi	r16, 0x20	; 32
    2ff6:	10 e0       	ldi	r17, 0x00	; 0
    2ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffc:	81 81       	ldd	r24, Z+1	; 0x01
    2ffe:	92 81       	ldd	r25, Z+2	; 0x02
    3000:	cc 01       	movw	r24, r24
    3002:	a0 e0       	ldi	r26, 0x00	; 0
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	bc 01       	movw	r22, r24
    3008:	cd 01       	movw	r24, r26
    300a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    300e:	9b 01       	movw	r18, r22
    3010:	ac 01       	movw	r20, r24
    3012:	ca 01       	movw	r24, r20
    3014:	b9 01       	movw	r22, r18
    3016:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	9c 01       	movw	r18, r24
    3020:	ad 01       	movw	r20, r26
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	74 e2       	ldi	r23, 0x24	; 36
    3026:	84 e7       	ldi	r24, 0x74	; 116
    3028:	99 e4       	ldi	r25, 0x49	; 73
    302a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	88 50       	subi	r24, 0x08	; 8
    3040:	f8 01       	movw	r30, r16
    3042:	80 83       	st	Z, r24
	TWSR = 0x00;
    3044:	e1 e2       	ldi	r30, 0x21	; 33
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address); // my address
    304a:	a2 e2       	ldi	r26, 0x22	; 34
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e9 81       	ldd	r30, Y+1	; 0x01
    3050:	fa 81       	ldd	r31, Y+2	; 0x02
    3052:	80 81       	ld	r24, Z
    3054:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    3056:	e6 e5       	ldi	r30, 0x56	; 86
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	84 e0       	ldi	r24, 0x04	; 4
    305c:	80 83       	st	Z, r24
}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	08 95       	ret

0000306c <TWI_start>:

void TWI_start(void)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3074:	e6 e5       	ldi	r30, 0x56	; 86
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	84 ea       	ldi	r24, 0xA4	; 164
    307a:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    307c:	e6 e5       	ldi	r30, 0x56	; 86
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	88 23       	and	r24, r24
    3084:	dc f7       	brge	.-10     	; 0x307c <TWI_start+0x10>
}
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	08 95       	ret

0000308c <TWI_stop>:

void TWI_stop(void)
{
    308c:	df 93       	push	r29
    308e:	cf 93       	push	r28
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3094:	e6 e5       	ldi	r30, 0x56	; 86
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	84 e9       	ldi	r24, 0x94	; 148
    309a:	80 83       	st	Z, r24
}
    309c:	cf 91       	pop	r28
    309e:	df 91       	pop	r29
    30a0:	08 95       	ret

000030a2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	0f 92       	push	r0
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    30ae:	e3 e2       	ldi	r30, 0x23	; 35
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    30b6:	e6 e5       	ldi	r30, 0x56	; 86
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	84 e8       	ldi	r24, 0x84	; 132
    30bc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    30be:	e6 e5       	ldi	r30, 0x56	; 86
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	88 23       	and	r24, r24
    30c6:	dc f7       	brge	.-10     	; 0x30be <TWI_writeByte+0x1c>
}
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    30d8:	e6 e5       	ldi	r30, 0x56	; 86
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	84 ec       	ldi	r24, 0xC4	; 196
    30de:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    30e0:	e6 e5       	ldi	r30, 0x56	; 86
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	88 23       	and	r24, r24
    30e8:	dc f7       	brge	.-10     	; 0x30e0 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    30ea:	e3 e2       	ldi	r30, 0x23	; 35
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
}
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    30fe:	e6 e5       	ldi	r30, 0x56	; 86
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	84 e8       	ldi	r24, 0x84	; 132
    3104:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3106:	e6 e5       	ldi	r30, 0x56	; 86
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	88 23       	and	r24, r24
    310e:	dc f7       	brge	.-10     	; 0x3106 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3110:	e3 e2       	ldi	r30, 0x23	; 35
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
}
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	0f 92       	push	r0
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    3126:	e1 e2       	ldi	r30, 0x21	; 33
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	88 7f       	andi	r24, 0xF8	; 248
    312e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    3130:	89 81       	ldd	r24, Y+1	; 0x01
}
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigTypes * Config_Ptr)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	00 d0       	rcall	.+0      	; 0x3140 <UART_init+0x6>
    3140:	00 d0       	rcall	.+0      	; 0x3142 <UART_init+0x8>
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	9c 83       	std	Y+4, r25	; 0x04
    3148:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    314a:	1a 82       	std	Y+2, r1	; 0x02
    314c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    314e:	eb e2       	ldi	r30, 0x2B	; 43
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	82 e0       	ldi	r24, 0x02	; 2
    3154:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3156:	ea e2       	ldi	r30, 0x2A	; 42
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	88 e1       	ldi	r24, 0x18	; 24
    315c:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0);
    315e:	e0 e4       	ldi	r30, 0x40	; 64
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	82 e8       	ldi	r24, 0x82	; 130
    3164:	80 83       	st	Z, r24

	/* insert the required parity mood in the bits ( UPM0, UPM1 )
	 * in UCSRC register
	 */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity_bits)<<4);
    3166:	a0 e4       	ldi	r26, 0x40	; 64
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e0 e4       	ldi	r30, 0x40	; 64
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	28 2f       	mov	r18, r24
    3172:	2f 7c       	andi	r18, 0xCF	; 207
    3174:	eb 81       	ldd	r30, Y+3	; 0x03
    3176:	fc 81       	ldd	r31, Y+4	; 0x04
    3178:	82 81       	ldd	r24, Z+2	; 0x02
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	82 95       	swap	r24
    3180:	92 95       	swap	r25
    3182:	90 7f       	andi	r25, 0xF0	; 240
    3184:	98 27       	eor	r25, r24
    3186:	80 7f       	andi	r24, 0xF0	; 240
    3188:	98 27       	eor	r25, r24
    318a:	82 2b       	or	r24, r18
    318c:	8c 93       	st	X, r24

	/*insert the required stop bits number in the bit ( USBS )
	 * in UCSRC register
	 */
	UCSRC = (UCSRC & 0xF7)  | ((Config_Ptr->stop_bits)<<3);
    318e:	a0 e4       	ldi	r26, 0x40	; 64
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e0 e4       	ldi	r30, 0x40	; 64
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	28 2f       	mov	r18, r24
    319a:	27 7f       	andi	r18, 0xF7	; 247
    319c:	eb 81       	ldd	r30, Y+3	; 0x03
    319e:	fc 81       	ldd	r31, Y+4	; 0x04
    31a0:	81 81       	ldd	r24, Z+1	; 0x01
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	82 2b       	or	r24, r18
    31b4:	8c 93       	st	X, r24

	/* insert the required number of data bits mood in bits ( UCSZ0, UCSZ1 ) in UCSRC register
	 * in case of 9 bits mood write 1 in bit ( UCSZ2 ) in UCSRB register
	 */
	if (Config_Ptr->data_bits == 9)
    31b6:	eb 81       	ldd	r30, Y+3	; 0x03
    31b8:	fc 81       	ldd	r31, Y+4	; 0x04
    31ba:	80 81       	ld	r24, Z
    31bc:	89 30       	cpi	r24, 0x09	; 9
    31be:	79 f4       	brne	.+30     	; 0x31de <UART_init+0xa4>
	{
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    31c0:	a0 e4       	ldi	r26, 0x40	; 64
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	e0 e4       	ldi	r30, 0x40	; 64
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	86 60       	ori	r24, 0x06	; 6
    31cc:	8c 93       	st	X, r24
		UCSRB |= (1<<UCSZ2);
    31ce:	aa e2       	ldi	r26, 0x2A	; 42
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	ea e2       	ldi	r30, 0x2A	; 42
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	84 60       	ori	r24, 0x04	; 4
    31da:	8c 93       	st	X, r24
    31dc:	0f c0       	rjmp	.+30     	; 0x31fc <UART_init+0xc2>
	}
	else
	{
		UCSRC |= ((Config_Ptr->data_bits)<<1);
    31de:	a0 e4       	ldi	r26, 0x40	; 64
    31e0:	b0 e0       	ldi	r27, 0x00	; 0
    31e2:	e0 e4       	ldi	r30, 0x40	; 64
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	28 2f       	mov	r18, r24
    31ea:	eb 81       	ldd	r30, Y+3	; 0x03
    31ec:	fc 81       	ldd	r31, Y+4	; 0x04
    31ee:	80 81       	ld	r24, Z
    31f0:	88 2f       	mov	r24, r24
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	82 2b       	or	r24, r18
    31fa:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    31fc:	eb 81       	ldd	r30, Y+3	; 0x03
    31fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3200:	83 81       	ldd	r24, Z+3	; 0x03
    3202:	94 81       	ldd	r25, Z+4	; 0x04
    3204:	a5 81       	ldd	r26, Z+5	; 0x05
    3206:	b6 81       	ldd	r27, Z+6	; 0x06
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	aa 1f       	adc	r26, r26
    320e:	bb 1f       	adc	r27, r27
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	aa 1f       	adc	r26, r26
    3216:	bb 1f       	adc	r27, r27
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	aa 1f       	adc	r26, r26
    321e:	bb 1f       	adc	r27, r27
    3220:	9c 01       	movw	r18, r24
    3222:	ad 01       	movw	r20, r26
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	92 e1       	ldi	r25, 0x12	; 18
    3228:	aa e7       	ldi	r26, 0x7A	; 122
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodsi4>
    3234:	da 01       	movw	r26, r20
    3236:	c9 01       	movw	r24, r18
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	9a 83       	std	Y+2, r25	; 0x02
    323c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    323e:	e0 e4       	ldi	r30, 0x40	; 64
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	9a 81       	ldd	r25, Y+2	; 0x02
    3246:	89 2f       	mov	r24, r25
    3248:	99 27       	eor	r25, r25
    324a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    324c:	e9 e2       	ldi	r30, 0x29	; 41
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	80 83       	st	Z, r24
}
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	08 95       	ret

00003262 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3262:	df 93       	push	r29
    3264:	cf 93       	push	r28
    3266:	0f 92       	push	r0
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    326e:	eb e2       	ldi	r30, 0x2B	; 43
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	88 2f       	mov	r24, r24
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	80 72       	andi	r24, 0x20	; 32
    327a:	90 70       	andi	r25, 0x00	; 0
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	b9 f3       	breq	.-18     	; 0x326e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3280:	ec e2       	ldi	r30, 0x2C	; 44
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3288:	0f 90       	pop	r0
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3298:	eb e2       	ldi	r30, 0x2B	; 43
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	88 23       	and	r24, r24
    32a0:	dc f7       	brge	.-10     	; 0x3298 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    32a2:	ec e2       	ldi	r30, 0x2C	; 44
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
}
    32a8:	cf 91       	pop	r28
    32aa:	df 91       	pop	r29
    32ac:	08 95       	ret

000032ae <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <UART_sendString+0x6>
    32b4:	0f 92       	push	r0
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	9b 83       	std	Y+3, r25	; 0x03
    32bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32be:	19 82       	std	Y+1, r1	; 0x01
    32c0:	0e c0       	rjmp	.+28     	; 0x32de <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	9b 81       	ldd	r25, Y+3	; 0x03
    32cc:	fc 01       	movw	r30, r24
    32ce:	e2 0f       	add	r30, r18
    32d0:	f3 1f       	adc	r31, r19
    32d2:	80 81       	ld	r24, Z
    32d4:	0e 94 31 19 	call	0x3262	; 0x3262 <UART_sendByte>
		i++;
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	8f 5f       	subi	r24, 0xFF	; 255
    32dc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	9b 81       	ldd	r25, Y+3	; 0x03
    32e8:	fc 01       	movw	r30, r24
    32ea:	e2 0f       	add	r30, r18
    32ec:	f3 1f       	adc	r31, r19
    32ee:	80 81       	ld	r24, Z
    32f0:	88 23       	and	r24, r24
    32f2:	39 f7       	brne	.-50     	; 0x32c2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	00 d0       	rcall	.+0      	; 0x330a <UART_receiveString+0xa>
    330a:	0f 92       	push	r0
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	9b 83       	std	Y+3, r25	; 0x03
    3312:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3314:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	8a 81       	ldd	r24, Y+2	; 0x02
    331e:	9b 81       	ldd	r25, Y+3	; 0x03
    3320:	8c 01       	movw	r16, r24
    3322:	02 0f       	add	r16, r18
    3324:	13 1f       	adc	r17, r19
    3326:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    332a:	f8 01       	movw	r30, r16
    332c:	80 83       	st	Z, r24
    332e:	0f c0       	rjmp	.+30     	; 0x334e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	8f 5f       	subi	r24, 0xFF	; 255
    3334:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	8a 81       	ldd	r24, Y+2	; 0x02
    333e:	9b 81       	ldd	r25, Y+3	; 0x03
    3340:	8c 01       	movw	r16, r24
    3342:	02 0f       	add	r16, r18
    3344:	13 1f       	adc	r17, r19
    3346:	0e 94 48 19 	call	0x3290	; 0x3290 <UART_recieveByte>
    334a:	f8 01       	movw	r30, r16
    334c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	9b 81       	ldd	r25, Y+3	; 0x03
    3358:	fc 01       	movw	r30, r24
    335a:	e2 0f       	add	r30, r18
    335c:	f3 1f       	adc	r31, r19
    335e:	80 81       	ld	r24, Z
    3360:	83 32       	cpi	r24, 0x23	; 35
    3362:	31 f7       	brne	.-52     	; 0x3330 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	9b 81       	ldd	r25, Y+3	; 0x03
    336e:	fc 01       	movw	r30, r24
    3370:	e2 0f       	add	r30, r18
    3372:	f3 1f       	adc	r31, r19
    3374:	10 82       	st	Z, r1
}
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	08 95       	ret

00003386 <__udivmodsi4>:
    3386:	a1 e2       	ldi	r26, 0x21	; 33
    3388:	1a 2e       	mov	r1, r26
    338a:	aa 1b       	sub	r26, r26
    338c:	bb 1b       	sub	r27, r27
    338e:	fd 01       	movw	r30, r26
    3390:	0d c0       	rjmp	.+26     	; 0x33ac <__udivmodsi4_ep>

00003392 <__udivmodsi4_loop>:
    3392:	aa 1f       	adc	r26, r26
    3394:	bb 1f       	adc	r27, r27
    3396:	ee 1f       	adc	r30, r30
    3398:	ff 1f       	adc	r31, r31
    339a:	a2 17       	cp	r26, r18
    339c:	b3 07       	cpc	r27, r19
    339e:	e4 07       	cpc	r30, r20
    33a0:	f5 07       	cpc	r31, r21
    33a2:	20 f0       	brcs	.+8      	; 0x33ac <__udivmodsi4_ep>
    33a4:	a2 1b       	sub	r26, r18
    33a6:	b3 0b       	sbc	r27, r19
    33a8:	e4 0b       	sbc	r30, r20
    33aa:	f5 0b       	sbc	r31, r21

000033ac <__udivmodsi4_ep>:
    33ac:	66 1f       	adc	r22, r22
    33ae:	77 1f       	adc	r23, r23
    33b0:	88 1f       	adc	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	1a 94       	dec	r1
    33b6:	69 f7       	brne	.-38     	; 0x3392 <__udivmodsi4_loop>
    33b8:	60 95       	com	r22
    33ba:	70 95       	com	r23
    33bc:	80 95       	com	r24
    33be:	90 95       	com	r25
    33c0:	9b 01       	movw	r18, r22
    33c2:	ac 01       	movw	r20, r24
    33c4:	bd 01       	movw	r22, r26
    33c6:	cf 01       	movw	r24, r30
    33c8:	08 95       	ret

000033ca <__prologue_saves__>:
    33ca:	2f 92       	push	r2
    33cc:	3f 92       	push	r3
    33ce:	4f 92       	push	r4
    33d0:	5f 92       	push	r5
    33d2:	6f 92       	push	r6
    33d4:	7f 92       	push	r7
    33d6:	8f 92       	push	r8
    33d8:	9f 92       	push	r9
    33da:	af 92       	push	r10
    33dc:	bf 92       	push	r11
    33de:	cf 92       	push	r12
    33e0:	df 92       	push	r13
    33e2:	ef 92       	push	r14
    33e4:	ff 92       	push	r15
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	ca 1b       	sub	r28, r26
    33f4:	db 0b       	sbc	r29, r27
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	09 94       	ijmp

00003402 <__epilogue_restores__>:
    3402:	2a 88       	ldd	r2, Y+18	; 0x12
    3404:	39 88       	ldd	r3, Y+17	; 0x11
    3406:	48 88       	ldd	r4, Y+16	; 0x10
    3408:	5f 84       	ldd	r5, Y+15	; 0x0f
    340a:	6e 84       	ldd	r6, Y+14	; 0x0e
    340c:	7d 84       	ldd	r7, Y+13	; 0x0d
    340e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3410:	9b 84       	ldd	r9, Y+11	; 0x0b
    3412:	aa 84       	ldd	r10, Y+10	; 0x0a
    3414:	b9 84       	ldd	r11, Y+9	; 0x09
    3416:	c8 84       	ldd	r12, Y+8	; 0x08
    3418:	df 80       	ldd	r13, Y+7	; 0x07
    341a:	ee 80       	ldd	r14, Y+6	; 0x06
    341c:	fd 80       	ldd	r15, Y+5	; 0x05
    341e:	0c 81       	ldd	r16, Y+4	; 0x04
    3420:	1b 81       	ldd	r17, Y+3	; 0x03
    3422:	aa 81       	ldd	r26, Y+2	; 0x02
    3424:	b9 81       	ldd	r27, Y+1	; 0x01
    3426:	ce 0f       	add	r28, r30
    3428:	d1 1d       	adc	r29, r1
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	ed 01       	movw	r28, r26
    3436:	08 95       	ret

00003438 <_exit>:
    3438:	f8 94       	cli

0000343a <__stop_program>:
    343a:	ff cf       	rjmp	.-2      	; 0x343a <__stop_program>
